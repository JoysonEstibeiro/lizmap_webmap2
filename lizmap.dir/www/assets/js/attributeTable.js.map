{"version":3,"file":"attributeTable.js","mappings":"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","sources":["webpack://lizmap-web-client/./node_modules/dompurify/dist/purify.es.mjs","webpack://lizmap-web-client/./assets/src/legacy/attributeTable.js"],"sourcesContent":["/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */\n\nconst {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor\n} = Object;\nlet {\n  freeze,\n  seal,\n  create\n} = Object; // eslint-disable-line import/no-mutable-exports\nlet {\n  apply,\n  construct\n} = typeof Reflect !== 'undefined' && Reflect;\nif (!freeze) {\n  freeze = function freeze(x) {\n    return x;\n  };\n}\nif (!seal) {\n  seal = function seal(x) {\n    return x;\n  };\n}\nif (!apply) {\n  apply = function apply(fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\nif (!construct) {\n  construct = function construct(Func, args) {\n    return new Func(...args);\n  };\n}\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySplice = unapply(Array.prototype.splice);\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\nconst objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\nconst regExpTest = unapply(RegExp.prototype.test);\nconst typeErrorCreate = unconstruct(TypeError);\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param func - The function to be wrapped and called.\n * @returns A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply(func) {\n  return function (thisArg) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return apply(func, thisArg, args);\n  };\n}\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param func - The constructor function to be wrapped and called.\n * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct(func) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return construct(func, args);\n  };\n}\n/**\n * Add properties to a lookup table\n *\n * @param set - The set to which elements will be added.\n * @param array - The array containing elements to be added to the set.\n * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns The modified set with added elements.\n */\nfunction addToSet(set, array) {\n  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n        element = lcElement;\n      }\n    }\n    set[element] = true;\n  }\n  return set;\n}\n/**\n * Clean up an array to harden against CSPP\n *\n * @param array - The array to be cleaned.\n * @returns The cleaned version of the array\n */\nfunction cleanArray(array) {\n  for (let index = 0; index < array.length; index++) {\n    const isPropertyExist = objectHasOwnProperty(array, index);\n    if (!isPropertyExist) {\n      array[index] = null;\n    }\n  }\n  return array;\n}\n/**\n * Shallow clone an object\n *\n * @param object - The object to be cloned.\n * @returns A new object that copies the original.\n */\nfunction clone(object) {\n  const newObject = create(null);\n  for (const [property, value] of entries(object)) {\n    const isPropertyExist = objectHasOwnProperty(object, property);\n    if (isPropertyExist) {\n      if (Array.isArray(value)) {\n        newObject[property] = cleanArray(value);\n      } else if (value && typeof value === 'object' && value.constructor === Object) {\n        newObject[property] = clone(value);\n      } else {\n        newObject[property] = value;\n      }\n    }\n  }\n  return newObject;\n}\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param object - The object to look up the getter function in its prototype chain.\n * @param prop - The property name for which to find the getter function.\n * @returns The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n    object = getPrototypeOf(object);\n  }\n  function fallbackValue() {\n    return null;\n  }\n  return fallbackValue;\n}\n\nconst html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\nconst svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\nconst svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nconst svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\nconst mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nconst mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\nconst text = freeze(['#text']);\n\nconst html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);\nconst svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\nconst mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\nconst xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n// eslint-disable-next-line unicorn/better-regex\nconst MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nconst ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nconst TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\nconst DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\nconst ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nconst IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nconst IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nconst ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nconst DOCTYPE_NAME = seal(/^html$/i);\nconst CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n\nvar EXPRESSIONS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ARIA_ATTR: ARIA_ATTR,\n  ATTR_WHITESPACE: ATTR_WHITESPACE,\n  CUSTOM_ELEMENT: CUSTOM_ELEMENT,\n  DATA_ATTR: DATA_ATTR,\n  DOCTYPE_NAME: DOCTYPE_NAME,\n  ERB_EXPR: ERB_EXPR,\n  IS_ALLOWED_URI: IS_ALLOWED_URI,\n  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n  MUSTACHE_EXPR: MUSTACHE_EXPR,\n  TMPLIT_EXPR: TMPLIT_EXPR\n});\n\n/* eslint-disable @typescript-eslint/indent */\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\nconst NODE_TYPE = {\n  element: 1,\n  attribute: 2,\n  text: 3,\n  cdataSection: 4,\n  entityReference: 5,\n  // Deprecated\n  entityNode: 6,\n  // Deprecated\n  progressingInstruction: 7,\n  comment: 8,\n  document: 9,\n  documentType: 10,\n  documentFragment: 11,\n  notation: 12 // Deprecated\n};\nconst getGlobal = function getGlobal() {\n  return typeof window === 'undefined' ? null : window;\n};\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param trustedTypes The policy factory.\n * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n    return null;\n  }\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      }\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n    return null;\n  }\n};\nconst _createHooksMap = function _createHooksMap() {\n  return {\n    afterSanitizeAttributes: [],\n    afterSanitizeElements: [],\n    afterSanitizeShadowDOM: [],\n    beforeSanitizeAttributes: [],\n    beforeSanitizeElements: [],\n    beforeSanitizeShadowDOM: [],\n    uponSanitizeAttribute: [],\n    uponSanitizeElement: [],\n    uponSanitizeShadowNode: []\n  };\n};\nfunction createDOMPurify() {\n  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n  const DOMPurify = root => createDOMPurify(root);\n  DOMPurify.version = '3.2.4';\n  DOMPurify.removed = [];\n  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document || !window.Element) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n    return DOMPurify;\n  }\n  let {\n    document\n  } = window;\n  const originalDocument = document;\n  const currentScript = originalDocument.currentScript;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes\n  } = window;\n  const ElementPrototype = Element.prototype;\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const remove = lookupGetter(ElementPrototype, 'remove');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName\n  } = document;\n  const {\n    importNode\n  } = originalDocument;\n  let hooks = _createHooksMap();\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n    CUSTOM_ELEMENT\n  } = EXPRESSIONS;\n  let {\n    IS_ALLOWED_URI: IS_ALLOWED_URI$1\n  } = EXPRESSIONS;\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n  /*\n   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n    tagNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    attributeNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    allowCustomizedBuiltInElements: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: false\n    }\n  }));\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n  /* Output should be safe even for XML used within HTML and alike.\n   * This means, DOMPurify removes comments when containing risky content.\n   */\n  let SAFE_FOR_XML = true;\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc = null;\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n  const formElement = document.createElement('form');\n  const isRegexOrFunction = function isRegexOrFunction(testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n  /**\n   * _parseConfig\n   *\n   * @param cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function _parseConfig() {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n    PARSER_MEDIA_TYPE =\n    // eslint-disable-next-line unicorn/prefer-includes\n    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n    /* Set configuration parameters */\n    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, text);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, html$1);\n        addToSet(ALLOWED_ATTR, html);\n      }\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, svg$1);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, svgFilters);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, mathMl$1);\n        addToSet(ALLOWED_ATTR, mathMl);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n    }\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n      }\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n      }\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n      }\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n    CONFIG = cfg;\n  };\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);\n  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);\n  /**\n   * @param element a DOM element whose namespace is being checked\n   * @returns Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function _checkValidNamespace(element) {\n    let parent = getParentNode(element);\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template'\n      };\n    }\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n      }\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n    }\n    // For XHTML and XML documents that support custom namespaces\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return true;\n    }\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n  /**\n   * _forceRemove\n   *\n   * @param node a DOM node\n   */\n  const _forceRemove = function _forceRemove(node) {\n    arrayPush(DOMPurify.removed, {\n      element: node\n    });\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      getParentNode(node).removeChild(node);\n    } catch (_) {\n      remove(node);\n    }\n  };\n  /**\n   * _removeAttribute\n   *\n   * @param name an Attribute name\n   * @param element a DOM node\n   */\n  const _removeAttribute = function _removeAttribute(name, element) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: element.getAttributeNode(name),\n        from: element\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: element\n      });\n    }\n    element.removeAttribute(name);\n    // We void attribute values for unremovable \"is\" attributes\n    if (name === 'is') {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(element);\n        } catch (_) {}\n      } else {\n        try {\n          element.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n  /**\n   * _initDocument\n   *\n   * @param dirty - a string of dirty markup\n   * @return a DOM, filled with the dirty markup\n   */\n  const _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n    }\n    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n    const body = doc.body || doc.documentElement;\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n    }\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param root The root element or node to start traversing on.\n   * @return The created NodeIterator\n   */\n  const _createNodeIterator = function _createNodeIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root,\n    // eslint-disable-next-line no-bitwise\n    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n  };\n  /**\n   * _isClobbered\n   *\n   * @param element element to check for clobbering attacks\n   * @return true if clobbered, false if safe\n   */\n  const _isClobbered = function _isClobbered(element) {\n    return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');\n  };\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param value object to check whether it's a DOM node\n   * @return true is object is a DOM node\n   */\n  const _isNode = function _isNode(value) {\n    return typeof Node === 'function' && value instanceof Node;\n  };\n  function _executeHooks(hooks, currentNode, data) {\n    arrayForEach(hooks, hook => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  }\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   * @param currentNode to check for permission to exist\n   * @return true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function _sanitizeElements(currentNode) {\n    let content = null;\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n    /* Execute a hook if present */\n    _executeHooks(hooks.uponSanitizeElement, currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove any occurrence of processing instructions */\n    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove any kind of possibly harmful comments */\n    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {\n          return false;\n        }\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {\n          return false;\n        }\n      }\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n          for (let i = childCount - 1; i >= 0; --i) {\n            const childClone = cloneNode(childNodes[i], true);\n            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n          }\n        }\n      }\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        content = stringReplace(content, expr, ' ');\n      });\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, {\n          element: currentNode.cloneNode()\n        });\n        currentNode.textContent = content;\n      }\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n    return false;\n  };\n  /**\n   * _isValidAttribute\n   *\n   * @param lcTag Lowercase tag name of containing element.\n   * @param lcName Lowercase attribute name.\n   * @param value Attribute value.\n   * @return Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n      return false;\n    }\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n      // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\n      // Alternative, second condition checks if it's an `is`-attribute, AND\n      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n      return false;\n    } else ;\n    return true;\n  };\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param tagName name of the tag of the node to sanitize\n   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n  };\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param currentNode to sanitize\n   */\n  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n    const {\n      attributes\n    } = currentNode;\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes || _isClobbered(currentNode)) {\n      return;\n    }\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n      forceKeepAttr: undefined\n    };\n    let l = attributes.length;\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const {\n        name,\n        namespaceURI,\n        value: attrValue\n      } = attr;\n      const lcName = transformCaseFunc(name);\n      let value = name === 'value' ? attrValue : stringTrim(attrValue);\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n      value = hookEvent.attrValue;\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n      /* Work around a security issue with comments inside attributes */\n      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n      /* Handle attributes that require Trusted Types */\n      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n        if (namespaceURI) ; else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML':\n              {\n                value = trustedTypesPolicy.createHTML(value);\n                break;\n              }\n            case 'TrustedScriptURL':\n              {\n                value = trustedTypesPolicy.createScriptURL(value);\n                break;\n              }\n          }\n        }\n      }\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n        if (_isClobbered(currentNode)) {\n          _forceRemove(currentNode);\n        } else {\n          arrayPop(DOMPurify.removed);\n        }\n      } catch (_) {}\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n  };\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n      /* Sanitize tags and elements */\n      _sanitizeElements(shadowNode);\n      /* Check attributes next */\n      _sanitizeAttributes(shadowNode);\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n  };\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty) {\n    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        const tagName = transformCaseFunc(dirty.nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n      // eslint-disable-next-line unicorn/prefer-includes\n      dirty.indexOf('<') === -1) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      }\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n    /* Now start iterating over the created document */\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Sanitize tags and elements */\n      _sanitizeElements(currentNode);\n      /* Check attributes next */\n      _sanitizeAttributes(currentNode);\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n    }\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n      return returnNode;\n    }\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n    /* Serialize doctype if allowed */\n    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n  };\n  DOMPurify.setConfig = function () {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n  DOMPurify.removeHook = function (entryPoint, hookFunction) {\n    if (hookFunction !== undefined) {\n      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n      return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];\n    }\n    return arrayPop(hooks[entryPoint]);\n  };\n  DOMPurify.removeHooks = function (entryPoint) {\n    hooks[entryPoint] = [];\n  };\n  DOMPurify.removeAllHooks = function () {\n    hooks = _createHooksMap();\n  };\n  return DOMPurify;\n}\nvar purify = createDOMPurify();\n\nexport { purify as default };\n//# sourceMappingURL=purify.es.mjs.map\n","/**\n * @module legacy/attributeTable.js\n * @name AttributeTable\n * @copyright 2023 3Liz\n * @license MPL-2.0\n */\n\nimport DOMPurify from 'dompurify';\n\nvar lizAttributeTable = function() {\n\n    const intRegex = /^[0-9]+$/;\n\n    const sqlEscapeFilter = (value, alwaysQuoteString) => {\n        if (Array.isArray(value)) {\n            // The values must be separated by comma AND spaces\n            // since QGIS controls the syntax for the FILTER parameter\n            return value.map(v => sqlEscapeFilter(v, alwaysQuoteString)).join(\" , \");\n        }\n\n        if (typeof value === 'string') {\n            if (!alwaysQuoteString && intRegex.test(value) ) {\n                // value is a string but represents an integer\n                // return unquoted string\n                return value;\n            }\n\n            // surround value with simple quotes and escape existing single-quote\n            return `'${value.replaceAll(\"'\", \"''\")}'`\n        }\n\n        // fallback: return value as-is\n        return value;\n    }\n\n    lizMap.events.on({\n        'uicreated':function(){\n\n            // Attributes\n            var config = lizMap.config;\n            var layers = lizMap.layers;\n            var hasAttributeTableLayers = false;\n            var attributeLayersActive = false;\n            var attributeLayersDic = {};\n            var wfsTypenameMap = {};\n            var mediaLinkPrefix = globalThis['lizUrls'].media + '?' + new URLSearchParams(globalThis['lizUrls'].params);\n            var startupFilter = false;\n            if( !( typeof lizLayerFilter === 'undefined' ) ){\n                startupFilter = true;\n                lizMap.lizmapLayerFilterActive = true;\n            }\n\n            var limitDataToBbox = false;\n            if ( 'limitDataToBbox' in config.options && config.options.limitDataToBbox == 'True'){\n                limitDataToBbox = true;\n            }\n\n            if (!('attributeLayers' in config))\n                return -1;\n\n            // Verifying WFS layers\n            var featureTypes = lizMap.getVectorLayerFeatureTypes();\n            if (featureTypes.length == 0 )\n                return -1;\n\n            $('body').css('cursor', 'wait');\n\n            // Sort attribute layers as given by creation order in Lizmap plugin\n            var attributeLayersSorted = [];\n\n            for (var lname in config.attributeLayers) {\n                var al = config.attributeLayers[lname];\n                al.name = lname;\n                attributeLayersSorted.push(al);\n            }\n            attributeLayersSorted.sort(function(a, b) {\n                return a.order - b.order;\n            });\n\n            for (var i = 0; i < attributeLayersSorted.length; i++) {\n                var al = attributeLayersSorted[i];\n                attributeLayersDic[lizMap.cleanName(al.name)] = al.name;\n            }\n\n            for(const featureType of featureTypes) {\n                // typename\n                var typeName = featureType.getElementsByTagName('Name')[0].textContent;\n                // layername\n                var layername = lizMap.getNameByTypeName( typeName );\n                if ( !layername || layername == undefined ) {\n                    continue;\n                }\n                // Check layername\n                // if layer is in a restricted group, the layer wil not be available\n                if (!lizMap.mainLizmap.state.layersAndGroupsCollection.layerNames.includes(layername)) {\n                    continue;\n                }\n                // lizmap internal js cleaned name\n                var cleanName = lizMap.cleanName(layername);\n                // lizmap config file layer name\n                var configLayerName = attributeLayersDic[cleanName];\n                // Add matching between wfs type name and clean name\n                wfsTypenameMap[cleanName] = typeName;\n\n                if (configLayerName in config.attributeLayers) {\n                    hasAttributeTableLayers = true;\n\n                    // Get layers config information\n                    var atConfig = config.attributeLayers[configLayerName];\n\n                    // Add some properties to the lizMap.config\n                    config.layers[configLayerName]['features'] = {};\n                    config.layers[configLayerName]['featureCrs'] = null;\n                    config.layers[configLayerName]['featuresFullSet'] = false;\n                    config.layers[configLayerName]['selectedFeatures'] = [];\n                    config.layers[configLayerName]['highlightedFeature'] = null;\n                    config.layers[configLayerName]['filteredFeatures'] = [];\n                    config.layers[configLayerName]['request_params'] = {\n                        'filter' : null,\n                        'exp_filter': null,\n                        'selection': null\n                    };\n\n                    // Get existing filter if exists (via permalink)\n                    const layer = lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(layername);\n\n                    if (layer.isFiltered) {\n                        config.layers[configLayerName]['request_params']['filter'] = layer.expressionFilter;\n\n                        // Send signal so that getFeatureInfo takes it into account\n                        lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                            {\n                                'featureType': attributeLayersDic[cleanName],\n                                'filter': config.layers[configLayerName]['request_params']['filter'],\n                                'updateDrawing': false\n                            }\n                        );\n                    }\n\n                    // Add geometryType if not already present (backward compatibility)\n                    if( typeof config.layers[configLayerName]['geometryType'] === 'undefined' ) {\n                        config.layers[configLayerName]['geometryType'] = 'unknown';\n                    }\n\n                    config.layers[configLayerName]['crs'] = featureType.getElementsByTagName('SRS')[0].textContent;\n\n                    if (config.layers[configLayerName]['crs'] !== \"\"){\n                        lizMap.loadProjDefinition(config.layers[configLayerName].crs, function (aProj) {\n                            new OpenLayers.Projection(config.layers[configLayerName].crs);\n                        });\n                    }\n\n                    var bbox = featureType.getElementsByTagName('LatLongBoundingBox')[0];\n                    atConfig['bbox'] = [\n                        parseFloat(bbox.getAttribute('minx'))\n                        , parseFloat(bbox.getAttribute('miny'))\n                        , parseFloat(bbox.getAttribute('maxx'))\n                        , parseFloat(bbox.getAttribute('maxy'))\n                    ];\n                }\n            }\n\n            if (hasAttributeTableLayers) {\n                // Attribute table could be activated to get selection tool\n                var hasDiplayedAttributeTable = false;\n\n                // Add the list of layers in the summary table\n                var tHtml = '<table id=\"attribute-layer-list-table\" class=\"table table-condensed table-hover table-striped\" style=\"width:auto;\">';\n                for( var idx in attributeLayersDic) {\n                    var cleanName = idx;\n\n                    // Do not add a button for the pivot tables\n                    if( 'pivot' in config.attributeLayers[ attributeLayersDic[ cleanName ] ]\n                        && config.attributeLayers[ attributeLayersDic[ cleanName ] ]['pivot'] == 'True'\n                    ){\n                        continue;\n                    }\n\n                    // Do not add a button if not asked by editor\n                    if( 'hideLayer' in config.attributeLayers[ attributeLayersDic[ cleanName ] ]\n                        && config.attributeLayers[ attributeLayersDic[ cleanName ] ]['hideLayer'] == 'True'\n                    ){\n                        continue;\n                    }\n\n                    var title = config.layers[ attributeLayersDic[ cleanName ] ][ 'title' ];\n                    tHtml+= '<tr>';\n                    tHtml+= '   <td>' + title + '</td><td><button value=' + cleanName + ' class=\"btn btn-open-attribute-layer\">'+ lizDict['attributeLayers.toolbar.btn.detail'] +'</button></td>';\n                    tHtml+= '</tr>';\n\n                    hasDiplayedAttributeTable = true;\n                }\n\n                tHtml+= '</table>';\n                if ( hasDiplayedAttributeTable ) {\n                    $('#attribute-layer-list').html(tHtml);\n\n                    // Bind click on detail buttons\n                    $('button.btn-open-attribute-layer')\n                        .click(function(){\n                            var cleanName = $(this).val();\n\n                            // Disable attribute table if limitDataToBbox and layer not visible in map\n                            if(limitDataToBbox){\n                                let layer = lizMap.mainLizmap.map.getLayerByName(lizMap.getLayerNameByCleanName(cleanName));\n                                if( layer ) {\n                                    if(warnResolution(layer)){\n                                        return false;\n                                    }\n                                }\n                            }\n\n                            // Add Div if not already there\n                            const layerName = attributeLayersDic[cleanName];\n                            if( !$('#nav-tab-attribute-layer-' + cleanName ).length ){\n                                addLayerDiv(layerName);\n                            }\n\n                            const layerFilter = ( 'request_params' in config.layers[layerName] && config.layers[layerName]['request_params']['exp_filter'] ) ?\n                                config.layers[layerName]['request_params']['exp_filter'] : null;\n\n                            const tableSelector = '#attribute-layer-table-' + cleanName;\n\n                            // Get data and fill attribute table\n                            getDataAndFillAttributeTable(layerName, layerFilter, tableSelector, false);\n\n                            $('#nav-tab-attribute-layer-' + cleanName + ' a' ).tab('show');\n\n                            return false;\n                        })\n                        .hover(\n                            function(){ $(this).addClass('btn-primary'); },\n                            function(){ $(this).removeClass('btn-primary'); }\n                        );\n\n                    // Bind change on options checkboxes\n                    $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').change(function(){\n                        var doCascade = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                        // refresh filtered layers if any active\n                        if( lizMap.lizmapLayerFilterActive ){\n                            var featureType = lizMap.lizmapLayerFilterActive;\n                            var layerConfig = config.layers[featureType];\n                            if( layerConfig['filteredFeatures'] ){\n\n                                // Update attribute table tools\n                                updateAttributeTableTools( featureType );\n\n                                // Update layer\n                                var cascadeToChildren = true;\n                                if( !doCascade )\n                                    cascadeToChildren = 'removeChildrenFilter';\n                                updateMapLayerDrawing( featureType, cascadeToChildren );\n\n                            }\n                        }\n                    });\n                } else {\n                    // Hide navbar menu\n                    $('#mapmenu li.attributeLayers').hide();\n                }\n\n                // Send signal\n                lizMap.events.triggerEvent(\"attributeLayersReady\",\n                    {'layers': attributeLayersDic}\n                );\n\n                // Map events\n                if (limitDataToBbox) {\n                    lizMap.mainLizmap.map.on('moveend', () => {\n                        let btitle = lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip.changed'];\n                        btitle += ' ' + lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip'];\n                        $('button.btn-refresh-table')\n                            .attr('data-original-title', btitle)\n                            .addClass('btn-warning')\n                            .tooltip();\n                    });\n                }\n\n                // Bind click on tabs to resize datatable tables\n                $('#attributeLayers-tabs li').click(function(){\n                    var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                    refreshDatatableSize('#'+mycontainerId);\n                });\n\n            } else {\n                // Hide navbar menu\n                $('#mapmenu li.attributeLayers').hide();\n                return -1;\n            }\n            $('body').css('cursor', 'auto');\n\n            /**\n             *\n             * @param layer\n             */\n            function warnResolution(layer) {\n                const mapResolution = lizMap.mainLizmap.map.getView().getResolution();\n                const visibility = layer.getMaxResolution() > mapResolution && mapResolution > layer.getMinResolution();\n                if( !visibility ){\n                    const msg = lizDict['attributeLayers.msg.layer.not.visible'];\n                    lizMap.addMessage( msg, 'info', true).attr('id','lizmap-attribute-message');\n                    return true;\n                }\n                return false;\n            }\n\n            /**\n             *\n             * @param layerName\n             * @param filter\n             * @param tableSelector\n             * @param forceEmptyTable\n             * @param callBack\n             */\n            function getDataAndFillAttributeTable(layerName, filter, tableSelector, forceEmptyTable, callBack){\n\n                let layerConfig = lizMap.config.layers[layerName];\n                const typeName = layerConfig?.shortname || layerConfig?.typename || layerConfig?.name;\n\n                const wfsParams = {\n                    TYPENAME: typeName,\n                    GEOMETRYNAME: 'extent'\n                };\n\n                if(filter){\n                    wfsParams['EXP_FILTER'] = filter;\n                }\n\n                // Calculate bbox from map extent if needed\n                if (config.options?.limitDataToBbox == 'True') {\n                    const mapExtent = lizMap.mainLizmap.map.getView().calculateExtent();\n                    const mapExtent4326 = lizMap.mainLizmap.transformExtent(\n                        mapExtent,\n                        lizMap.mainLizmap.map.getView().getProjection().getCode(),\n                        'EPSG:4326'\n                    );\n                    wfsParams['BBOX'] = mapExtent4326;\n                    wfsParams['SRSNAME'] = 'EPSG:4326';\n                }\n\n                const getFeatureRequest = lizMap.mainLizmap.wfs.getFeature(wfsParams);\n\n                let fetchRequests = [getFeatureRequest];\n                let namedRequests = {'getFeature': fetchRequests.length-1};\n\n\n                if (!(layerConfig?.['alias'] && layerConfig?.['types'])) {\n                    const describeFeatureTypeRequest = lizMap.mainLizmap.wfs.describeFeatureType({\n                        TYPENAME: typeName\n                    });\n                    fetchRequests.push(describeFeatureTypeRequest);\n                    namedRequests['describeFeatureType'] = fetchRequests.length-1;\n                }\n\n                const allColumnsKeyValues = {};\n\n                // Indexes 0 and 1 are use for getFeature and describeFeature requests\n                namedRequests['keyValues'] = fetchRequests.length+0;\n                let responseOrder = fetchRequests.length+0;\n                for (const fieldName in lizMap.keyValueConfig?.[layerName]) {\n                    const fieldConf = lizMap.keyValueConfig[layerName][fieldName];\n                    if (fieldConf.type == 'ValueMap') {\n                        allColumnsKeyValues[fieldName] = fieldConf.data;\n                    } else {\n                        // Get the layer typename based on its id\n                        let getSourceLayer = lizMap.getLayerConfigById(fieldConf.source_layer_id);\n                        if( !getSourceLayer || getSourceLayer.length != 2) continue;\n                        const source_typename = getSourceLayer[1].typename;\n                        if (source_typename == undefined) {\n                            // The source layer is not published in WFS\n                            continue;\n                        }\n                        // Use an integer as a placeholder for coming fetched key/values\n                        allColumnsKeyValues[fieldName] = responseOrder;\n                        responseOrder++;\n                        fetchRequests.push(lizMap.mainLizmap.wfs.getFeature({\n                            TYPENAME: source_typename,\n                            PROPERTYNAME: fieldConf.code_field + ',' + fieldConf.label_field,\n                            // we must not use null for exp_filter but '' if no filter is active\n                            EXP_FILTER: fieldConf.exp_filter ? fieldConf.exp_filter : ''\n                        }));\n                    }\n                }\n                if (forceEmptyTable) return buildLayerAttributeDatatable(layerName, tableSelector, [], layerConfig.aliases, layerConfig.types, allColumnsKeyValues, callBack);\n\n                document.body.style.cursor = 'progress';\n                Promise.all(fetchRequests).then(responses => {\n\n                    // Get every key/value from relation layers\n                    for (let index = namedRequests['keyValues']; index < responses.length; index++) {\n                        // Get column name using order placeholder defined before\n                        const columnName = Object.keys(allColumnsKeyValues).find(key => allColumnsKeyValues[key] === index);\n                        const keyField = lizMap.keyValueConfig[layerName][columnName].code_field;\n                        const valueField = lizMap.keyValueConfig[layerName][columnName].label_field;\n\n                        const keyValue = {};\n\n                        responses[index].features.forEach(feature => keyValue[feature.properties[keyField]] = feature.properties[valueField]);\n\n                        allColumnsKeyValues[columnName] = keyValue;\n\n                    }\n                    layerConfig['featureCrs'] = 'EPSG:4326';\n                    if (namedRequests?.['describeFeatureType']) {\n                        const describeFeatureTypeResponse = responses[namedRequests['describeFeatureType']];\n                        layerConfig['aliases'] = describeFeatureTypeResponse.aliases;\n                        layerConfig['types'] = describeFeatureTypeResponse.types;\n                        layerConfig['columns'] = describeFeatureTypeResponse.columns;\n                    }\n\n                    buildLayerAttributeDatatable(layerName, tableSelector, responses[0].features, layerConfig.aliases, layerConfig.types, allColumnsKeyValues, callBack);\n\n                    document.body.style.cursor = 'default';\n                }).catch(() => {\n                    document.body.style.cursor = 'default';\n                });\n            }\n\n            /**\n             *\n             * @param layerName\n             * @param filter\n             * @param tableSelector\n             * @param callBack\n             */\n            function getDataAndRefreshAttributeTable(layerName, filter, tableSelector, callBack){\n\n                const layerConfig = lizMap.config.layers[layerName];\n                const typeName = layerConfig?.shortname || layerConfig?.typename || layerConfig?.name;\n\n                const wfsParams = {\n                    TYPENAME: typeName,\n                    GEOMETRYNAME: 'extent'\n                };\n\n                if(filter){\n                    wfsParams['EXP_FILTER'] = filter;\n                }\n\n                // Calculate bbox from map extent if needed\n                if (config.options?.limitDataToBbox == 'True') {\n                    const mapExtent = lizMap.mainLizmap.map.getView().calculateExtent();\n                    const mapExtent4326 = lizMap.mainLizmap.transformExtent(\n                        mapExtent,\n                        lizMap.mainLizmap.map.getView().getProjection().getCode(),\n                        'EPSG:4326'\n                    );\n                    wfsParams['BBOX'] = mapExtent4326;\n                    wfsParams['SRSNAME'] = 'EPSG:4326';\n                }\n\n                const getFeatureRequest = lizMap.mainLizmap.wfs.getFeature(wfsParams);\n                Promise.all([getFeatureRequest]).then(responses => {\n                    refreshLayerAttributeDatatable(layerName, tableSelector, responses[0].features);\n                    document.body.style.cursor = 'default';\n                }).catch(() => {\n                    document.body.style.cursor = 'default';\n                });\n            }\n\n            /**\n             *\n             */\n            function activateAttributeLayers() {\n                attributeLayersActive = true;\n\n                // Deactivate locate-menu\n                if ( $('#locate-menu').is(':visible') && lizMap.checkMobile()){\n                    $('#toggleLocate').parent().removeClass('active');\n                    $('#locate-menu').toggle();\n                }\n                return false;\n            }\n\n            /**\n             *\n             */\n            function deactivateAttributeLayers() {\n                // Some actions done when deactivating attribute table\n                return false;\n            }\n\n            /**\n             *\n             * @param parentLayerId\n             * @param childLayerId\n             */\n            function getRelationInfo(parentLayerId,childLayerId){\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    for( var lridx in layerRelations ) {\n                        var relation = layerRelations[lridx];\n                        if (relation.referencingLayer == childLayerId) {\n                            return relation;\n                        }\n                    }\n                }\n                return null;\n            }\n\n            /**\n             *\n             * @param lname\n             */\n            function addLayerDiv(lname) {\n                // Get layer config\n                var atConfig = config.attributeLayers[lname];\n                var cleanName = lizMap.cleanName(lname);\n\n                // Add li to the tabs\n                var liHtml = '<li id=\"nav-tab-attribute-layer-' + cleanName + '\">';\n                liHtml+= '<a href=\"#attribute-layer-' + cleanName + '\" data-toggle=\"tab\">' + config.layers[lname]['title'] ;\n                liHtml+= '&nbsp;<i class=\"btn-close-attribute-tab icon-remove icon-white\" style=\"cursor:pointer\"></i>';\n                liHtml+= '</a>'\n                liHtml+= '</li>';\n\n                $('#attributeLayers-tabs').append( liHtml );\n\n                // Add content div\n                var html = '<div id=\"attribute-layer-' + cleanName + '\" class=\"tab-pane attribute-content bottom-content\" >';\n                html+= '    <div class=\"attribute-layer-main\" id=\"attribute-layer-main-' + cleanName + '\" >';\n\n                if( !config.layers[lname]['selectedFeatures'] )\n                    config.layers[lname]['selectedFeatures'] = [];\n                if( !config.layers[lname]['filteredFeatures'] )\n                    config.layers[lname]['filteredFeatures'] = [];\n\n                var selClass= '';\n                if( config.layers[lname]['selectedFeatures'].length == 0 )\n                    selClass= ' hidden';\n                var filClass= '';\n                if( config.layers[lname]['filteredFeatures'].length > 0 )\n                    filClass= ' active btn-primary';\n                else\n                    filClass = selClass\n\n                // Action bar specific to the tab\n                html+= '<div class=\"attribute-layer-action-bar\">';\n\n                // Search input\n                html+= '<div class=\"btn-group\">';\n                html+= '  <input id=\"attribute-layer-search-' + cleanName + '\" type=\"search\" class=\"form-control\" placeholder=\"'+lizDict['attributeLayers.toolbar.input.search.title']+'\">';\n                html+= '  <i class=\"clear-layer-search icon-remove\" style=\"position:absolute;right:4px;top:4px;cursor:pointer;\"></i>';\n                html+= '</div>';\n\n                // Selected searched lines button\n                html+= '<button class=\"btn-select-searched btn btn-mini\" value=\"'+cleanName+'\" title=\"'+lizDict['attributeLayers.toolbar.btn.select.searched.title']+'\"><i class=\"icon-star\"></i></button>';\n\n                // Unselect button\n                html+= '    <button class=\"btn-unselect-attributeTable btn btn-mini' + selClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.unselect.title']+'\"><i class=\"icon-star-empty\"></i></button>';\n\n                // 'Move selected to top' button\n                html+= '    <button class=\"btn-moveselectedtotop-attributeTable btn btn-mini' + selClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.moveselectedtotop.title']+'\"><i class=\"icon-arrow-up\"></i></button>';\n\n                // Filter button : only if no filter applied at startup\n                if( !startupFilter\n                    && ( !lizMap.lizmapLayerFilterActive || lizMap.lizmapLayerFilterActive == lname )\n                ){\n                    html+= '    <button class=\"btn-filter-attributeTable btn btn-mini' + filClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.filter.title']+'\"><i class=\"icon-filter\"></i></button>';\n                }\n\n                // Invert selection\n                html += '<lizmap-selection-invert tooltip-placement=\"bottom\" feature-type=\"' + cleanName +'\"></lizmap-selection-invert>'\n\n                // Detail button\n                var canPopup = false\n                if( config.layers[lname]\n                    && config.layers[lname]['popup'] == 'True'\n                    // We should NOT  deactivate popup for non-spatial layers, as it can be very useful\n                    // && config.layers[lname]['geometryType'] != 'none'\n                    && config.layers[lname]['geometryType'] != 'unknown'\n                ){\n                    canPopup = true;\n                }\n                if( canPopup ){\n                    html+= '<button type=\"checkbox\" class=\"btn-detail-attributeTable btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.cb.data.detail.title']+'\">';\n                    html+= '<i class=\"icon-info-sign\"></i>';\n                    html+= '</button>';\n                }\n\n                // Create button\n                var canCreate = false;\n                if ('editionLayers' in config\n                    && cleanName in attributeLayersDic\n                    && attributeLayersDic[cleanName] in config.editionLayers) {\n                    var al = config.editionLayers[attributeLayersDic[cleanName]];\n                    if (al.capabilities.createFeature == \"True\") {\n                        canCreate = true;\n                    }\n                }\n                if (canCreate) {\n                    html+= '    <button class=\"btn-createFeature-attributeTable btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.createFeature.title']+'\"><i class=\"icon-plus-sign\"></i></button>';\n                }\n\n                // Refresh button (if limitDataToBbox is true)\n                if( limitDataToBbox\n                    && config.layers[lname]['geometryType'] != 'none'\n                    && config.layers[lname]['geometryType'] != 'unknown'\n                ){\n                    // Add button to refresh table\n                    html+= '<button class=\"btn-refresh-table btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip']+'\">'+lizDict['attributeLayers.toolbar.btn.refresh.table.title']+'</button>';\n\n                }\n\n                // Get children content\n                var childHtml = getChildrenHtmlContent( lname );\n                var alc='';\n\n                // Toggle children content\n                if( childHtml ){\n                    // Add button to show/hide children tables\n                    html+= '    <button class=\"btn-toggle-children btn btn-mini\" value=\"' + cleanName + '\" >'+lizDict['attributeLayers.toolbar.btn.toggle.children.title']+'</button>';\n\n                    // Add buttons to create new children\n                    if( childHtml['childCreateButton'] )\n                        html+= childHtml['childCreateButton'];\n\n                    // Add buttons to link parent and children\n                    if( childHtml['layerLinkButton'] )\n                        html+= childHtml['layerLinkButton'];\n                }\n\n                // Export tools\n                if ( 'exportLayers' in config.options && config.options.exportLayers == 'True' ) {\n                    html+= '&nbsp;<div class=\"export-formats btn-group pull-right\" role=\"group\" >';\n                    html+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle exportLayer\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                    html+= lizDict['attributeLayers.toolbar.btn.data.export.title'];\n                    html+= '      <span class=\"caret\"></span>';\n                    html+= '    </button>';\n                    html+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                    html+= '        <li><a href=\"#\" class=\"btn-export-attributeTable\">GeoJSON</a></li>';\n                    html+= '        <li><a href=\"#\" class=\"btn-export-attributeTable\">GML</a></li>';\n                    var exportFormats = lizMap.getVectorLayerResultFormat();\n                    for ( var i=0, len=exportFormats.length; i<len; i++ ) {\n                        var format = exportFormats[i].toLowerCase();\n                        if ( format != 'gml2' && format != 'gml3' && format != 'geojson' ) {\n                            html += '        <li><a href=\"#\" class=\"btn-export-attributeTable\">'+format+'</a></li>';\n                        }\n                    }\n                    html+= '    </ul>';\n                    html+= '</div>';\n                }\n\n                html+= '</div>'; // attribute-layer-action-bar\n\n                if( childHtml ) {\n                    alc= ' showChildren';\n                }\n                html+= '<div class=\"attribute-layer-content'+alc+'\">';\n                html+= '    <input type=\"hidden\" class=\"attribute-table-hidden-layer\" value=\"'+cleanName+'\">';\n                html+= '    <table id=\"attribute-layer-table-' + cleanName + '\" class=\"attribute-table-table table table-hover table-condensed table-striped order-column cell-border\" width=\"100%\"></table>';\n\n                html+= '</div>';  // attribute-layer-content\n\n                // Add children content\n                if( childHtml ){\n                    // Add children content : one tab per childlayer\n                    html+= '<div class=\"tabbable attribute-layer-child-content\">';\n                    // Ul content\n                    html+= '    <ul class=\"nav nav-tabs\">';\n                    for( var i in childHtml['tab-li'] ){\n                        var cLi = childHtml['tab-li'][i];\n                        html+= cLi;\n                    }\n                    html+= '    </ul>';\n                    html+= '    <div class=\"tab-content\">';\n                    // Tab content\n                    for( var i in childHtml['tab-content'] ){\n                        var cDiv = childHtml['tab-content'][i];\n                        html+= cDiv;\n                    }\n                    html+= '    </div>'; // tab-content\n                    html+= '</div>'; // tabbable\n                }\n\n                html+= '</div>';  // attribute-layer-main\n\n                // Right panel to show info\n                html+= '    <div class=\"attribute-layer-feature-panel\" id=\"attribute-table-panel-' + cleanName + '\" ></div>';\n\n                html+= '</div>'; // 'attribute-layer-' + cleanName\n\n                $('#attribute-table-container').append(html);\n\n                $('#attribute-layer-' + cleanName + ' button').tooltip( {\n                    placement: 'bottom'\n                } );\n\n                $('.btn-close-attribute-tab').click(function(){\n                    //there are multiple elements which has .closeTab icon so close the tab whose close icon is clicked\n                    var tabContentId = $(this).parent().attr(\"href\");\n                    $(this).parent().parent().remove(); //remove li of tab\n                    $('#attributeLayers-tabs a:last').tab('show'); // Select first tab\n                    $(tabContentId).remove(); //remove respective tab content\n                });\n\n                if( childHtml ){\n\n                    // Bind adjust child columns when children tab visibility change\n                    $('#attribute-layer-' + cleanName + ' div.attribute-layer-child-content ul li a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n                        var target = $(e.target).attr(\"href\") // activated tab\n                        var dtable = $(target).find('table.dataTable');\n                        dtable.DataTable().tables().columns.adjust();\n                    });\n                }\n\n                if(limitDataToBbox){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-refresh-table')\n                        .click(function(){\n                        // Reset button tooltip & style\n                            $(this)\n                                .attr('data-original-title', lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip'])\n                                .removeClass('btn-warning');\n\n                            // Disable if the layer is not visible\n                            let layer = lizMap.mainLizmap.map.getLayerByName(lizMap.getLayerNameByCleanName(cleanName));\n                            if( layer ) {\n                                if(warnResolution(layer)){\n                                    return false;\n                                }\n                            }else{\n                            // do nothing if no layer found\n                                return false;\n                            }\n\n                            // Refresh table\n                            const tableSelector = '#attribute-layer-table-'+cleanName;\n                            $('#attribute-layer-main-'+cleanName+' > div.attribute-layer-content').hide();\n\n                            getDataAndFillAttributeTable(lname, null, tableSelector, false, () => {\n                                $('#attribute-layer-main-' + cleanName + ' > div.attribute-layer-content').show();\n                                refreshDatatableSize('#attribute-layer-main-' + cleanName);\n                            });\n\n                            return false;\n                        })\n                        .hover(\n                            function(){ $(this).addClass('btn-primary'); },\n                            function(){ $(this).removeClass('btn-primary'); }\n                        );\n                }\n\n                if( childHtml ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-toggle-children')\n                        .click(function(){\n                            var parentDir = $(this).parents('div.attribute-layer-main');\n                            parentDir.find('div.attribute-layer-content').toggleClass('showChildren');\n                            parentDir.find('div.tabbable.attribute-layer-child-content').toggle();\n                            // Refresh parent table size\n                            refreshDatatableSize('#attribute-layer-main-'+ cleanName);\n                            return false;\n                        });\n                }\n\n                // Bind click on detail button\n                // It just toggles the right panel visibility\n                if( canPopup ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-detail-attributeTable')\n                        .click(function(){\n                        // Toggle\n                            $('#attribute-layer-main-' + cleanName).toggleClass('reduced', !$(this).hasClass('btn-primary'));\n                            $('#attribute-table-panel-' + cleanName).toggleClass('visible', !$(this).hasClass('btn-primary'));\n                            $(this).toggleClass('btn-primary');\n\n                            refreshDatatableSize('#attribute-layer-main-'+ cleanName);\n                            return false;\n                        });\n                }\n\n                // Bind click on \"unselect all\" button\n                $('#attribute-layer-'+ cleanName + ' button.btn-unselect-attributeTable')\n                    .click(function(){\n                        var aName = attributeLayersDic[ $(this).val() ];\n                        // Send signal\n                        lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                            { 'featureType': aName, 'updateDrawing': true}\n                        );\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n                // Bind click on \"move selected to top\" button\n                $('#attribute-layer-'+ cleanName + ' button.btn-moveselectedtotop-attributeTable')\n                    .click(function(){\n                        var aTable = '#attribute-layer-table-' + $(this).val();\n                        var dTable = $( aTable ).DataTable();\n                        var previousOrder = dTable.order();\n                        previousOrder = $.grep(previousOrder, function(o){\n                            return o[0] != 0;\n                        });\n                        var selectedOrder = [ [0, 'asc'] ];\n                        var newOrder = selectedOrder.concat(previousOrder);\n                        dTable.order( newOrder ).draw();\n\n                        // Scroll to top\n                        $(aTable).parents('div.attribute-layer-content').scrollTop(0);\n\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n\n                // Bind click on filter button\n                if( !startupFilter ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-filter-attributeTable')\n                        .click(function(){\n                            var aName = attributeLayersDic[ $(this).val() ];\n                            if( $(this).hasClass('btn-primary') ) {\n                                lizMap.events.triggerEvent( \"layerfeatureremovefilter\",\n                                    { 'featureType': aName}\n                                );\n                                lizMap.lizmapLayerFilterActive = null;\n                            } else {\n                                lizMap.events.triggerEvent(\"layerfeaturefilterselected\",\n                                    { 'featureType': aName}\n                                );\n                                lizMap.lizmapLayerFilterActive = aName;\n                            }\n                            return false;\n                        });\n                }\n\n                // Bind click on export buttons\n                $('#attribute-layer-'+ cleanName + ' a.btn-export-attributeTable')\n                    .click(function(){\n                        var eFormat = $(this).text();\n                        if( eFormat == 'GML' )\n                            eFormat = 'GML3';\n                        var cleanName = $(this).parents('div.attribute-layer-main:first').attr('id').replace('attribute-layer-main-', '');\n                        var eName = attributeLayersDic[ cleanName ];\n                        lizMap.exportVectorLayer( eName, eFormat, limitDataToBbox );\n                        $(this).blur();\n                        return false;\n                    });\n\n                // Bind click on createFeature button\n                // BEWARE - This is used for creating a new line in the displayed attribute table\n                // and for creating a new child item\n                $('#attribute-layer-'+ cleanName + ' button.btn-createFeature-attributeTable')\n                    .click(function(){\n                        // Ask the user to click on a table line\n                        // before trying to create a child feature\n                        const creationContext = ($(this).hasClass('new-child')) ? 'child' : 'parent';\n                        if (creationContext == 'child'\n                            && $('#attribute-layer-'+ cleanName + ' tr.active').length != 1) {\n                            $('#lizmap-edition-message').remove();\n                            lizMap.addMessage( lizDict['attributeLayers.toolbar.btn.data.createChildFeature.no.actived'], 'info', true).attr('id','lizmap-edition-message');\n                            return false;\n                        }\n                        const parentFidElement = document.querySelector('#attribute-layer-'+ cleanName + ' tr.active lizmap-feature-toolbar');\n                        var parentFeatId = (parentFidElement) ? parentFidElement.fid : null;\n                        var parentLayerName = attributeLayersDic[ cleanName ];\n                        var parentLayerId = config.layers[parentLayerName]['id'];\n                        var aName = attributeLayersDic[ $(this).val() ];\n                        var pivotId = $(this).attr(\"data-pivot\");\n                        var lid = config.layers[aName]['id'];\n                        if (creationContext == 'parent') {\n                            lizMap.launchEdition( lid, null, null);\n                        } else {\n                            lizMap.getLayerFeature(parentLayerName, parentFeatId, function(parentFeat) {\n                                lizMap.launchEdition( lid, null, {layerId:parentLayerId, feature:parentFeat, pivotId:pivotId});\n                            });\n                        }\n\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n                // Bind click on createFeature button via dropDown\n                $('#attribute-layer-'+ cleanName + ' a.btn-createFeature-attributeTable')\n                    .click(function(){\n                        if ( $('#attribute-layer-'+ cleanName + ' tr.active').length != 1) {\n                            $('#lizmap-edition-message').remove();\n                            lizMap.addMessage( lizDict['attributeLayers.toolbar.btn.data.createChildFeature.no.actived'], 'info', true).attr('id','lizmap-edition-message');\n                            return false;\n                        }\n                        var parentFeatId = document.querySelector('#attribute-layer-'+ cleanName + ' tr.active lizmap-feature-toolbar').fid;\n                        var parentLayerName = attributeLayersDic[ cleanName ];\n                        var parentLayerId = config.layers[parentLayerName]['id'];\n                        var selectedValue = $(this).attr('href').replace('#', '');\n                        var aName = attributeLayersDic[ selectedValue ];\n                        lizMap.getLayerFeature(parentLayerName, parentFeatId, function(parentFeat) {\n                            var lid = config.layers[aName]['id'];\n                            lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                            $(this).blur();\n                        });\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n                // Bind click on linkFeatures button\n                $('#attribute-layer-'+ cleanName + ' a.btn-linkFeatures-attributeTable')\n                    .click(function(){\n                        var selectedValue = $(this).attr('href').replace('#', '');\n                        $(this).blur();\n                        var cName = attributeLayersDic[ selectedValue ];\n                        var cId = config.layers[cName]['id'];\n                        var attrConfig = config.attributeLayers[cName];\n                        var p = [];\n                        var pName = attributeLayersDic[cleanName];\n                        var pId = config.layers[pName]['id'];\n                        var doQuery = false;\n\n                        if( 'pivot' in attrConfig\n                        && attrConfig['pivot'] == 'True'\n                        && cId in config.relations.pivot\n                        ){\n                        // Get parents info : layer id, fkey column in the pivot table for the parent, values of primary key for selected ids\n                            for( var parId in config.relations.pivot[cId] ){\n                                var par = buildLinkParameters( parId );\n                                if (!par)\n                                    return false;\n                                par['id'] = parId;\n                                var parKey = config.relations.pivot[cId][parId];\n                                par['fkey'] = parKey;\n\n                                // Add parent info to the table\n                                p.push(par);\n\n                            }\n\n                            if( !( p.length == 2 )  )\n                                return false;\n\n                            doQuery = 'pivot';\n\n                        }else{\n\n                            var par = buildLinkParameters( pId );\n                            var chi = buildLinkParameters( cId );\n\n                            if (!par || !chi )\n                                return false;\n                            par['id'] = pId;\n                            // We take the primary key of the child layer (because 1:n relation )\n                            par['fkey'] = config.attributeLayers[cName]['primaryKey'];\n\n                            chi['id'] = cId;\n                            if( !( pId in config.relations ) )\n                                return false;\n                            for( var rp in config.relations[pId] ){\n                                var rpItem = config.relations[pId][rp];\n                                if( rpItem.referencingLayer == cId ){\n                                    chi['fkey'] = rpItem.referencingField\n                                }else{\n                                    continue;\n                                }\n                            }\n                            if( !('fkey' in chi ) )\n                                return false;\n\n                            p.push(par);\n                            p.push(chi);\n\n                            doQuery = '1n';\n\n                        }\n\n                        if( doQuery ){\n                            var service = globalThis['lizUrls'].edition + '?' + new URLSearchParams(globalThis['lizUrls'].params);\n                            $.post(service.replace('getFeature','linkFeatures'),{\n                                features1: p[0]['id'] + ':' + p[0]['fkey'] + ':' + p[0]['selected'].join(),\n                                features2: p[1]['id'] + ':' + p[1]['fkey'] + ':' + p[1]['selected'].join(),\n                                pivot: cId\n\n                            }, function(data){\n                            // Show response message\n                                $('#lizmap-edition-message').remove();\n                                lizMap.addMessage( data, 'info', true).attr('id','lizmap-edition-message');\n\n                                // Unselect features of parent (or child)\n                                // And trigger table refresh\n                                if( doQuery == 'pivot' ){\n                                    lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                                        { 'featureType': attributeLayersDic[cleanName], 'updateDrawing': true}\n                                    );\n                                    // Send signal saying edition has been done on pivot and refresh corresponding tables\n                                    var linkedId = lizMap.config.layers[attributeLayersDic[cleanName]]?.id\n                                    if (linkedId) {\n                                        var pivotCfg = lizMap.config.relations.pivot[cId];\n                                        // get layerId of related layer\n                                        var linkedKey = Object.keys(pivotCfg).filter((key)=>{\n                                            return key != linkedId\n                                        })?.[0]\n\n                                        if (linkedKey) {\n                                            cId = linkedKey;\n                                        }\n                                    }\n                                    lizMap.events.triggerEvent(\"lizmapeditionfeaturecreated\",\n                                        { 'layerId': cId}\n                                    );\n                                }else{\n                                    lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                                        { 'featureType': cName, 'updateDrawing': true}\n                                    );\n                                    // Send signal saying edition has been done on pivot\n                                    lizMap.events.triggerEvent(\"lizmapeditionfeaturemodified\",\n                                        { 'layerId': cId}\n                                    );\n                                }\n                            });\n                        }\n\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n                // Bind click on btn-select-searched button\n                $('#attribute-layer-'+ cleanName + ' button.btn-select-searched').click(function(){\n                    var aName = attributeLayersDic[ $(this).val() ];\n\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeatureselectsearched\",\n                        { 'featureType': aName, 'updateDrawing': true}\n                    );\n                    return false;\n                })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n            }\n\n            /**\n             *\n             * @param layerId\n             */\n            function buildLinkParameters( layerId ){\n                var lp  = {};\n\n                // Get ids of selected feature\n                var getP = lizMap.getLayerConfigById( layerId, config.attributeLayers, 'layerId' );\n                if( !getP )\n                    return false;\n\n                lp['name'] = getP[0];\n\n                var idSelected = config.layers[ getP[0] ]['selectedFeatures'];\n                if( !( idSelected.length > 0 ) )\n                    return false;\n\n                // Get corresponding values of parent primary key column for these ids\n                var fi = [];\n                var features = config.layers[ getP[0] ]['features'];\n                if ( !features || Object.keys(features).length <= 0 )\n                    return false;\n\n                var primaryKey = getP[1]['primaryKey'];\n                var intRegex = /^[0-9]+$/;\n                for( var x in idSelected ) {\n                    var idFeat = idSelected[x];\n                    var afeat = features[idFeat];\n                    if( typeof afeat === \"undefined\" )\n                        continue;\n                    var pk = afeat.properties[primaryKey];\n                    if( !( intRegex.test(pk) ) )\n                        pk = \" '\" + pk + \"' \";\n                    fi.push( pk );\n                }\n                lp['selected'] = fi;\n\n                return lp;\n            }\n\n            /**\n             *\n             * @param parentLayerName\n             */\n            function getChildrenHtmlContent( parentLayerName ) {\n\n                var childHtml = null;\n                var childDiv = [];\n                var childLi = [];\n                var childCreateButton = ''; var childCreateButtonItems = [];\n                var layerLinkButton = ''; var layerLinkButtonItems = [];\n                var lConfig = config.layers[parentLayerName];\n                if ( !lConfig )\n                    return childHtml;\n                var parentLayerId = lConfig['id'];\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    var childCount = 0;\n                    var childActive = 'active';\n                    for( var lid in layerRelations ) {\n                        var relation = layerRelations[lid];\n                        var referencingLayerConfig = lizMap.getLayerConfigById(\n                            relation.referencingLayer,\n                            config.layers,\n                            'id'\n                        );\n                        var isNToM = false;\n                        var pivotConfig = null;\n                        var mLayerConfig = null;\n\n                        if (referencingLayerConfig && referencingLayerConfig[0] in config.attributeLayers) {\n                            // check if the renferencing layer is a pivot\n                            mLayerConfig = getPivotLinkedLayerConfiguration(parentLayerId, referencingLayerConfig[1]);\n                            // if so, switch the child layer to the \"n_layer\" if the n_layer could be displayed in attribute table\n                            if( mLayerConfig && mLayerConfig.config && mLayerConfig.config[0] in config.attributeLayers) {\n                                // store original pivot configuration\n                                pivotConfig = referencingLayerConfig;\n                                isNToM = true;\n                            }\n                            childCount+=1;\n                            if( childCount > 1)\n                                childActive = '';\n                            // if the detected relation is n to m, then use mLayer configuration to display the child attribute table\n                            var childLayerConfig = isNToM ? mLayerConfig.config[1] : referencingLayerConfig[1];\n                            var childLayerName = isNToM ? mLayerConfig.config[0] : referencingLayerConfig[0];\n                            var childAttributeLayerConfig = config.attributeLayers[childLayerName];\n\n                            // Discard if the editor does not want this layer to be displayed in child table\n                            if( 'hideAsChild' in childAttributeLayerConfig && childAttributeLayerConfig['hideAsChild'] == 'True' )\n                                continue;\n\n                            // Build child table id by concatenating parent and child layer names\n                            var tabId = 'attribute-child-tab-' + lizMap.cleanName(parentLayerName) + '-' + lizMap.cleanName(childLayerName);\n\n                            // Build Div content for tab\n                            var cDiv = '<div class=\"tab-pane attribute-layer-child-content '+childActive+'\" id=\"'+ tabId +'\" >';\n                            var tId = 'attribute-layer-table-' + lizMap.cleanName(parentLayerName) + '-' + lizMap.cleanName(childLayerName);\n                            var tClass = 'attribute-table-table table table-hover table-condensed table-striped cell-border child-of-' + lizMap.cleanName(parentLayerName);\n                            cDiv+= '    <input type=\"hidden\" class=\"attribute-table-hidden-parent-layer\" value=\"'+lizMap.cleanName(parentLayerName)+'\">';\n                            cDiv+= '    <input type=\"hidden\" class=\"attribute-table-hidden-layer\" value=\"'+lizMap.cleanName(childLayerName)+'\">';\n                            cDiv+= '    <table id=\"' + tId  + '\" class=\"' + tClass + '\" width=\"100%\"></table>';\n                            cDiv+= '</div>';\n                            childDiv.push(cDiv);\n\n                            // Build li content for tab\n                            var cLi = '<li id=\"nav-tab-'+ tabId +'\" class=\"'+childActive+'\"><a href=\"#'+ tabId +'\" data-toggle=\"tab\">'+ childLayerConfig.title +'</a></li>';\n                            childLi.push(cLi);\n\n                            // Add create child feature button\n                            var canCreateChild = false;\n                            if ('editionLayers' in config) {\n                                if (childLayerName in config.editionLayers) {\n                                    var al = config.editionLayers[childLayerName];\n                                    if (al.capabilities.createFeature == \"True\") {\n                                        canCreateChild = true;\n                                    }\n                                }\n                                // if the m layer is displayed then check also the edition capabilities on pivot\n                                if(canCreateChild && isNToM){\n                                    // check edition capabilities for pivot table\n                                    canCreateChild = pivotConfig[0] in config.editionLayers && config.editionLayers[pivotConfig[0]] && config.editionLayers[pivotConfig[0]].capabilities.createFeature == 'True'\n                                }\n                            }\n                            if( canCreateChild ){\n                                // Add a button to create a new feature for this child layer\n                                let childButtonItem = `\n                                    <button class=\"btn btn-mini btn-createFeature-attributeTable new-child\" data-pivot=\"${isNToM ? pivotConfig[1].id : ''}\" value=\"${lizMap.cleanName(childLayerName)}\" title=\"${lizDict['attributeLayers.toolbar.btn.data.createFeature.title']}\">\n                                    ➕ ${childLayerConfig.title}\n                                    </button>\n                                `;\n                                childCreateButtonItems.push(childButtonItem);\n\n                                // Link parent with the selected features of the child\n                                layerLinkButtonItems.push('<li><a href=\"#' + lizMap.cleanName(isNToM ? pivotConfig[0] : childLayerName) + '\" class=\"btn-linkFeatures-attributeTable\">' + (isNToM ? pivotConfig[1].title : childLayerConfig.title) +'</a></li>' );\n                            }\n                        }\n                    }\n\n                }\n                if( childLi.length ){\n                    if( childCreateButtonItems.length > 0 ){\n                        childCreateButton+= '&nbsp;<span class=\"edition-children-add-buttons\">';\n                        for( var i in  childCreateButtonItems){\n                            const childButton = childCreateButtonItems[i];\n                            childCreateButton+= childButton;\n                        }\n                        childCreateButton+= '</span>';\n                    }\n                    if( layerLinkButtonItems.length > 0 ){\n                        layerLinkButton+= '&nbsp;<div class=\"btn-group\" role=\"group\" >';\n                        layerLinkButton+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                        layerLinkButton+= lizDict['attributeLayers.toolbar.btn.data.linkFeatures.title'];\n                        layerLinkButton+= '      <span class=\"caret\"></span>';\n                        layerLinkButton+= '    </button>';\n                        layerLinkButton+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                        for( var i in  layerLinkButtonItems){\n                            var li = layerLinkButtonItems[i];\n                            layerLinkButton+= li;\n                        }\n                        layerLinkButton+= '    </ul>';\n                        layerLinkButton+= '</div>';\n                    }\n                    childHtml = {\n                        'tab-content': childDiv,\n                        'tab-li': childLi,\n                        'childCreateButton': childCreateButton,\n                        'layerLinkButton': layerLinkButton\n                    } ;\n                }\n                return childHtml;\n            }\n\n            // Refresh attribute table content for all children of a given layer\n            /**\n             *\n             * @param sourceTable\n             * @param featureType\n             * @param featId\n             */\n            function refreshChildrenLayersContent( sourceTable, featureType, featId ) {\n                var feat = config.layers[featureType]['features'][featId];\n                if(!feat) {\n                    return false;\n                }\n                var fp = feat.properties;\n\n                var lConfig = config.layers[featureType];\n                if ( !lConfig ) {\n                    return false;\n                }\n                var parentLayerId = lConfig['id'];\n                // Refresh recursively for direct children and other parent\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    for (const relation of layerRelations ) {\n                        var referencingLayerConfig = lizMap.getLayerConfigById(\n                            relation.referencingLayer,\n                            config.layers,\n                            'id'\n                        );\n\n                        // Fill in attribute table for child\n                        if( referencingLayerConfig ) {\n                            var isNToM = false, mLayerConfig = null;\n                            // check if the referencingLayer is a pivot table\n                            mLayerConfig = getPivotLinkedLayerConfiguration(parentLayerId, referencingLayerConfig[1]);\n                            if (mLayerConfig) {\n                                // if the realtion is n to m, switch the layer config to the mLayer\n                                referencingLayerConfig = mLayerConfig.config;\n                                isNToM = true;\n                            }\n                            // Discard if the editor does not want this layer to be displayed in child table\n                            if (config.attributeLayers?.[referencingLayerConfig[0]]?.['hideAsChild'] == 'False') {\n                                const [childLayerName, childLayerConfig] = referencingLayerConfig;\n                                // Get child table id\n                                const childTableSelector = sourceTable.replace(' table:first', '') + '-' + lizMap.cleanName(childLayerName);\n                                // Generate filter\n                                let filter = '';\n                                if ( isNToM ) {\n                                    // get feature from pivot\n                                    getPivotWFSFeatures(relation.referencingLayer, mLayerConfig.relation, fp[relation.referencedField]).then((filterString)=>{\n                                        getEditionChildData(childLayerName, filterString, childTableSelector, filterString ? false : true);\n                                    })\n                                } else {\n                                    if( relation.referencingLayer == childLayerConfig.id ){\n                                        filter = '\"' + relation.referencingField + '\" = ' + \"'\" + fp[relation.referencedField] + \"'\";\n                                    }\n                                    getDataAndFillAttributeTable(childLayerName, filter, childTableSelector, false);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            var lizdelay = (function(){\n                var timer = 0;\n                return function(callback, ms){\n                    clearTimeout (timer);\n                    timer = setTimeout(callback, ms);\n                };\n            })();\n\n            /**\n             *\n             * @param aName\n             * @param aTable\n             * @param cFeatures\n             * @param aCallback\n             */\n            function refreshLayerAttributeDatatable(aName, aTable, cFeatures, aCallback) {\n                // Get config\n                var lConfig = config.layers[aName];\n                // get cleaned name\n                var cleanName = lizMap.cleanName( aName );\n\n                // Detect if table is parent or child\n                var isChild = true;\n                let parentLayerID = '';\n                if (['#attribute-layer-table-', '#edition-table-'].includes(aTable.replace(cleanName, ''))){\n                    isChild = false;\n                }else{\n                    let parentLayerName = '';\n                    if (aTable.startsWith('#attribute-layer-table-')){\n                        parentLayerName =  aTable.replace('#attribute-layer-table-', '').split('-')[0];\n                    } else if (aTable.startsWith('#edition-table-')) {\n                        parentLayerName = aTable.replace('#edition-table-', '').split('-')[0];\n                    }\n\n                    if(parentLayerName){\n                        parentLayerID = config.layers[parentLayerName]['id'];\n                    }\n                }\n\n                // Hidden fields\n                var hiddenFields = [];\n                if( aName in config.attributeLayers\n                    && 'hiddenFields' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['hiddenFields']\n                ){\n                    var hf = config.attributeLayers[aName]['hiddenFields'].trim();\n                    hiddenFields = hf.split(/[\\s,]+/);\n                }\n\n                cFeatures = typeof cFeatures !== 'undefined' ?  cFeatures : null;\n                if( !cFeatures ){\n                    // features is an object, let's transform it to an array\n                    // XXX IE compat: Object.values is not available on IE...\n                    var features = config.layers[aName]['features'];\n                    cFeatures = Object.keys(features).map(function (key) {\n                        return features[key];\n                    });\n                }\n\n                if( cFeatures && cFeatures.length > 0 ){\n                    // Format features for datatable\n                    formatDatatableFeatures(\n                        cFeatures,\n                        isChild,\n                        hiddenFields,\n                        lConfig['selectedFeatures'],\n                        lConfig['id'],\n                        parentLayerID\n                    ).then((ff) => {\n                        var foundFeatures = ff.foundFeatures;\n                        var dataSet = ff.dataSet;\n\n                        // Datatable configuration\n                        if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                            var oTable = $( aTable ).dataTable();\n                            oTable.fnClearTable();\n                            oTable.fnAddData( dataSet );\n                        }\n                        lConfig['features'] = foundFeatures;\n                    });\n                }\n\n                if ( !cFeatures || cFeatures.length == 0 ){\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                    }\n                    $(aTable).hide();\n\n                    $('#attribute-layer-'+ cleanName +' span.attribute-layer-msg').html(\n                        lizDict['attributeLayers.toolbar.msg.data.nodata'] + ' ' + lizDict['attributeLayers.toolbar.msg.data.extent']\n                    ).addClass('failure');\n                } else {\n                    $(aTable).show();\n                }\n\n                if (aCallback)\n                    aCallback(aName,aTable);\n\n                return false;\n            }\n\n            /**\n             *\n             * @param aName\n             * @param aTable\n             * @param cFeatures\n             * @param cAliases\n             * @param cTypes\n             * @param allColumnsKeyValues\n             * @param aCallback\n             */\n            function buildLayerAttributeDatatable(aName, aTable, cFeatures, cAliases, cTypes, allColumnsKeyValues, aCallback ) {\n                // Get config\n                var lConfig = config.layers[aName];\n\n                // get cleaned name\n                var cleanName = lizMap.cleanName( aName );\n\n                cAliases = typeof cAliases !== 'undefined' ?  cAliases : null;\n                if( !cAliases ){\n                    cAliases = lConfig['alias'];\n                }\n                for( const key in cAliases){\n                    if(cAliases[key]==\"\"){\n                        cAliases[key]=key;\n                    }\n                }\n\n                // Detect if table is parent or child\n                var isChild = true;\n                let parentLayerID = '';\n                if (['#attribute-layer-table-', '#edition-table-'].includes(aTable.replace(cleanName, ''))){\n                    isChild = false;\n                }else{\n                    let parentLayerCleanName = '';\n                    if (aTable.startsWith('#attribute-layer-table-')){\n                        parentLayerCleanName =  aTable.replace('#attribute-layer-table-', '').split('-')[0];\n                    } else if (aTable.startsWith('#edition-table-')) {\n                        parentLayerCleanName = aTable.replace('#edition-table-', '').split('-')[0];\n                    }\n\n                    if(parentLayerCleanName){\n                        const parentLayerName = lizMap.getLayerNameByCleanName(parentLayerCleanName);\n                        if (parentLayerName) {\n                            parentLayerID = config.layers[parentLayerName]['id'];\n                        }\n                    }\n                }\n\n                // Pivot table ?\n                var isPivot = false;\n                if( isChild\n                    && 'pivot' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['pivot'] == 'True'\n                ){\n                    isPivot = true;\n                }\n                var pivotReference = null;\n                // checks if the parent and child are related via pivot\n                if (parentLayerID) {\n                    // means that the table is displayed as a child\n                    var parentLayerConfig = lizMap.getLayerConfigById(parentLayerID);\n                    var fromEditionForm = aTable.startsWith('#attribute-layer-table-') ? false : (aTable.startsWith('#edition-table-') ? true : false);\n                    var highlightedFeature = null;\n                    if (fromEditionForm) {\n                        // get fid of current layer on editing\n                        highlightedFeature = $('#edition-form-container form input[name=\"liz_featureId\"]').val();\n                    } else {\n                        highlightedFeature = config.layers[attributeLayersDic[parentLayerConfig[1].cleanname]].highlightedFeature;\n                    }\n                    if (parentLayerConfig && parentLayerConfig[1] && parentLayerConfig[1].cleanname && highlightedFeature) {\n                        var childLayerId = lConfig.id;\n                        var pivotId = getPivotIdFromRelatedLayers(parentLayerID, childLayerId);\n                        if (pivotId) {\n                            pivotReference = pivotId + \":\" + highlightedFeature;\n                        }\n                    }\n                }\n\n                // Hidden fields\n                var hiddenFields = [];\n                if( aName in config.attributeLayers\n                    && 'hiddenFields' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['hiddenFields']\n                ){\n                    var hf = config.attributeLayers[aName]['hiddenFields'].trim();\n                    hiddenFields = hf.split(/[\\s,]+/);\n                }\n\n                // Check edition capabilities\n                var canEdit = false;\n                var canDelete = false;\n                if( 'editionLayers' in config && aName in config.editionLayers ) {\n                    var al = config.editionLayers[aName];\n                    if( al.capabilities.modifyAttribute == \"True\" || al.capabilities.modifyGeometry == \"True\" )\n                        canEdit = true;\n                    if( al.capabilities.deleteFeature == \"True\" )\n                        canDelete = true;\n                }\n\n                cFeatures = typeof cFeatures !== 'undefined' ?  cFeatures : null;\n                if( !cFeatures ){\n                    // features is an object, let's transform it to an array\n                    // XXX IE compat: Object.values is not available on IE...\n                    var features = config.layers[aName]['features'];\n                    cFeatures = Object.keys(features).map(function (key) {\n                        return features[key];\n                    });\n                }\n\n                var atFeatures = cFeatures;\n                var dataLength = atFeatures.length;\n\n                if( cFeatures && cFeatures.length > 0 ){\n                    // Create columns for datatable\n                    var cdc = createDatatableColumns(aName, atFeatures, hiddenFields, cAliases, cTypes, allColumnsKeyValues);\n                    var columns = cdc.columns;\n                    var firstDisplayedColIndex = cdc.firstDisplayedColIndex;\n\n                    // Format features for datatable\n                    formatDatatableFeatures(\n                        atFeatures,\n                        isChild,\n                        hiddenFields,\n                        lConfig['selectedFeatures'],\n                        lConfig['id'],\n                        parentLayerID,\n                        pivotReference\n                    ).then((ff) => {\n                        var foundFeatures = ff.foundFeatures;\n                        var dataSet = ff.dataSet;\n\n                        // Fill in the features object\n                        // only when necessary : object is empty or is not child or (is child and no full features list in the object)\n                        var refillFeatures = false;\n                        var dLen = lConfig['features'] ? Object.keys(lConfig['features']).length : 0;\n                        if( dLen == 0 ){\n                            refillFeatures = true;\n                            if( !isChild ){\n                                lConfig['featuresFullSet'] = true;\n                            }\n                        }\n                        else{\n                            if( isChild ){\n                                if( !lConfig['featuresFullSet'] ){\n                                    refillFeatures = true;\n                                }\n                            }else{\n                                lConfig['featuresFullSet'] = true;\n                                refillFeatures = true;\n                            }\n                        }\n                        if( refillFeatures  ) {\n                            lConfig['features'] = foundFeatures;\n                        }\n\n                        lConfig['alias'] = cAliases;\n                        // Datatable configuration\n                        if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                            var oTable = $( aTable ).dataTable();\n                            oTable.fnClearTable();\n                            oTable.fnAddData( dataSet );\n                        }\n                        else {\n                            // Search while typing in text input\n                            // Deactivate if too many items\n                            var searchWhileTyping = true;\n                            if( dataLength > 500000 ){\n                                searchWhileTyping = false;\n                            }\n\n                            var myDom = '<<t>ipl>';\n                            if( searchWhileTyping ) {\n                                $('#attribute-layer-search-' + cleanName).on( 'keyup', function (e){\n                                    var searchVal = this.value;\n                                    lizdelay(function(){\n                                        oTable.fnFilter( searchVal );\n                                    }, 500 );\n                                });\n                            }else{\n                                myDom = '<<t>ipl>';\n                            }\n\n                            $( aTable ).dataTable( {\n                                data: dataSet\n                                ,columns: columns\n                                ,initComplete: function(settings, json) {\n                                    const api = new $.fn.dataTable.Api(settings);\n                                    const tableId = api.table().node().id;\n                                    const featureType = tableId.split('attribute-layer-table-')[1];\n\n                                    // Trigger event telling attribute table is ready\n                                    lizMap.events.triggerEvent(\"attributeLayerContentReady\",\n                                        {\n                                            'featureType': featureType\n                                        }\n                                    );\n                                }\n                                ,order: [[ firstDisplayedColIndex, \"asc\" ]]\n                                ,language: { url:globalThis['lizUrls'][\"dataTableLanguage\"] }\n                                ,deferRender: true\n                                ,createdRow: function ( row, data, dataIndex ) {\n                                    if ( $.inArray( data.DT_RowId.toString(), lConfig['selectedFeatures'] ) != -1\n                                    ) {\n                                        $(row).addClass('selected');\n                                        data.lizSelected = 'a';\n                                    }\n                                }\n                                ,drawCallback: function (settings) {\n                                    // rendering ok, find img with data-attr-thumbnail\n                                    const thumbnailColl = document.getElementsByClassName('data-attr-thumbnail');\n                                    for(let thumbnail of thumbnailColl) {\n                                        thumbnail.setAttribute('src', lizUrls.media+'?repository='+lizUrls.params.repository+'&project='+lizUrls.params.project+'&path='+thumbnail.dataset.src);\n                                    }\n                                }\n                                ,dom: myDom\n                                ,pageLength: 50\n                                ,scrollY: '95%'\n                                ,scrollX: '100%'\n\n                            } );\n\n                            var oTable = $( aTable ).dataTable();\n\n                            if( !searchWhileTyping )\n                                $('#attribute-layer-search-' + cleanName).hide();\n\n                            // Bind button which clears top-left search input content\n                            $('#attribute-layer-search-' + cleanName).next('.clear-layer-search').click(function(){\n                                $('#attribute-layer-search-' + cleanName).val('').focus().keyup();\n                            });\n\n                            // Unbind previous events on page\n                            $( aTable ).on( 'page.dt', function() {\n                                // unbind previous events\n                                $(aTable +' tr').unbind('click');\n                                $(aTable +' tr td button').unbind('click');\n                            });\n\n                            // Bind events when drawing table\n                            $( aTable ).on( 'draw.dt', function() {\n\n                                $(aTable +' tr').unbind('click');\n                                $(aTable +' tr td button').unbind('click');\n\n                                // Bind event when users click anywhere on the table line to highlight\n                                bindTableLineClick(aName, aTable);\n\n                                // Refresh size\n                                var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n\n                                refreshDatatableSize('#' + mycontainerId);\n\n                                return false;\n\n                            });\n                        }\n\n                        // Check editable features\n                        if (canEdit || canDelete) {\n                            lizMap.mainLizmap.edition.fetchEditableFeatures([lConfig.id]);\n                        }\n\n                    });\n                }\n\n                if ( !cFeatures || cFeatures.length == 0 ){\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                    }\n                    $(aTable).hide();\n\n                    $('#attribute-layer-'+ cleanName +' span.attribute-layer-msg').html(\n                        lizDict['attributeLayers.toolbar.msg.data.nodata'] + ' ' + lizDict['attributeLayers.toolbar.msg.data.extent']\n                    ).addClass('failure');\n\n                } else {\n                    $(aTable).show();\n                    refreshDatatableSize('#'+$('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id'))\n\n                }\n\n                if (aCallback)\n                    aCallback(aName,aTable);\n\n                return false;\n            }\n\n            /**\n             *\n             * @param aName\n             * @param atFeatures\n             * @param hiddenFields\n             * @param cAliases\n             * @param cTypes\n             * @param allColumnsKeyValues\n             */\n            function createDatatableColumns(aName, atFeatures, hiddenFields, cAliases, cTypes, allColumnsKeyValues){\n                const columns = [];\n                let firstDisplayedColIndex = 0;\n                // Column with selected status\n                columns.push( {\"data\": \"lizSelected\", \"width\": \"25px\", \"searchable\": false, \"sortable\": true, \"visible\": false} );\n                firstDisplayedColIndex+=1;\n\n                columns.push({ \"data\": \"featureToolbar\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false});\n                firstDisplayedColIndex += 1;\n\n                // Add column for each field\n                for (var columnName in atFeatures[0].properties){\n                    // Do not add hidden fields\n                    if (hiddenFields.includes(columnName)){\n                        continue;\n                    }\n\n                    const colConf = {\n                        \"data\": columnName,\n                        \"title\": cAliases[columnName]\n                    };\n\n                    // Replace keys by values if defined\n                    if (allColumnsKeyValues?.hasOwnProperty(columnName)){\n                        const columnKeyValues = allColumnsKeyValues[columnName];\n                        colConf['render'] = function (data, type, row, meta) {\n                            // Return value related to key if any. Else return original data\n                            // Handle multiple values defined as an array\n                            if (Array.isArray(data)){\n                                return data.map(key => columnKeyValues[key] ? columnKeyValues[key] : key).join(', ');\n                            }\n                            // For multiple values displayed as {\"value a\", \"value b\"} we must first split the value\n                            else if (data && data.toString().substring(0, 1) == '{' && data.toString().slice(-1) == '}') {\n                                var displayLabels = [];\n                                var stringData = data.toString();\n                                stringData = stringData.substring(1, stringData.length - 1);\n                                let splitValues = stringData.split(',');\n                                for (var s in splitValues) {\n                                    let splitValue = splitValues[s].replace(/\"/g, '');\n                                    displayLabels.push(columnKeyValues[splitValue] ? columnKeyValues[splitValue] : splitValue);\n                                }\n                                let displayText = displayLabels.length > 0 ? displayLabels.join(', ') : null;\n                                return displayText;\n                            } else {\n                                return columnKeyValues[data] ? columnKeyValues[data] : data ;\n                            }\n                        }\n                    } else if (['decimal', 'double'].includes(cTypes?.[columnName])) {\n                        // Handle decimal\n                        colConf['render'] = function (data, type, row, meta) {\n                            return parseFloat(data);\n                        }\n                    } else {\n                        // Check if we need to replace url or media by link\n                        let davConf = globalThis['lizUrls'].webDavUrl && globalThis['lizUrls']?.resourceUrlReplacement?.webdav && config.layers[aName]?.webDavFields && Array.isArray(config.layers[aName].webDavFields) && config.layers[aName].webDavFields.includes(columnName);\n                        colConf['render'] = function (data, type, row, meta) {\n                            // Replace media and URL with links\n                            if (!data || !(typeof data === 'string'))\n                                return data;\n                            if (davConf) {\n                                // replace the root of the url\n                                if(data.startsWith(globalThis['lizUrls'].webDavUrl)){\n                                    data = data.replace(globalThis['lizUrls'].webDavUrl, globalThis['lizUrls'].resourceUrlReplacement.webdav)\n                                }\n                            }\n\n                            if (data.substring(0, 6) == 'media/' || data.substring(0, 7) == '/media/' || data.substring(0, 9) == '../media/') {\n                                var rdata = data;\n                                var colMeta = meta.settings.aoColumns[meta.col];\n                                if (data.substring(0, 7) == '/media/')\n                                    rdata = data.slice(1);\n                                return '<a href=\"' + mediaLinkPrefix + '&path=' + rdata + '\" target=\"_blank\">' + colMeta.title + '</a>';\n                            }\n                            else if (davConf && data.substring(0, 4) == globalThis['lizUrls'].resourceUrlReplacement.webdav) {\n                                var rdata = data;\n                                var colMeta = meta.settings.aoColumns[meta.col];\n                                return '<a href=\"' + mediaLinkPrefix + '&path=' + rdata + '\" target=\"_blank\">' + colMeta.title + '</a>';\n\n                            }\n                            else if (data.substring(0, 4) == 'http' || data.substring(0, 3) == 'www') {\n                                var rdata = data;\n                                if (data.substring(0, 3) == 'www')\n                                    rdata = 'http://' + data;\n                                return '<a href=\"' + rdata + '\" target=\"_blank\">' + data + '</a>';\n                            }\n                            else\n                                return data;\n                        }\n                    }\n\n                    // Handle text alignment\n                    // Note: when keys are replaced by values, alignment is\n                    // made based on keys type and not values type as in QGIS\n                    switch (cTypes?.[columnName]) {\n                        case 'integer':\n                        case 'int':\n                        case 'unsignedInt':\n                        case 'long':\n                        case 'unsignedLong':\n                        case 'decimal':\n                        case 'double':\n                            colConf['className'] = 'text-right';\n                            break;\n                        case 'date':\n                            colConf['className'] = 'text-center';\n                            break;\n                        default:\n                            break;\n                    }\n\n                    columns.push( colConf );\n                }\n\n                var colToReturn = {\n                    'columns': columns,\n                    'firstDisplayedColIndex': firstDisplayedColIndex\n                };\n\n                // Reorder and hide columns from QGIS attributetableconfig property\n                if(\n                    'attributetableconfig' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['attributetableconfig']\n                    && !$.isEmptyObject(config.attributeLayers[aName]['attributetableconfig']['columns'])\n                ){\n                    var atc = config.attributeLayers[aName]['attributetableconfig']['columns']['column'];\n                    if(atc.length == 0){\n                        return colToReturn;\n                    }\n                    var lizcols = columns.slice(0, firstDisplayedColIndex);\n                    var newcolumns = columns.slice(firstDisplayedColIndex);\n\n                    var newpos = 0;\n                    for(var x in atc){\n                        var colx = atc[x];\n                        // Do nothing if the item does not reference a field\n                        if(colx.attributes.type != 'field')\n                            continue;\n                        var fieldname = colx.attributes.name;\n                        var colhidden = colx.attributes.hidden;\n\n                        // Rearrange columns\n                        for (var i=0; i < newcolumns.length; i++) {\n                            // move item\n                            if ('data' in newcolumns[i] && newcolumns[i].data === fieldname) {\n                                // adds it back to the good position if not declared hidden\n                                if( colhidden == \"1\" ){\n                                    // Remove the item\n                                    var a = newcolumns.splice(i,1);\n                                }else{\n                                    // Move the item\n                                    var cfrom = i;\n                                    newcolumns.splice(newpos, 0, newcolumns.splice(cfrom,1)[0]);\n                                    newpos+= 1;\n                                }\n                                break;\n                            }\n                        }\n                    }\n\n                    var newcolumnsfinal = lizcols.concat(newcolumns)\n                    colToReturn['columns'] = newcolumnsfinal;\n                } else if (\n                    'columns' in config.layers[aName]\n                    && config.layers[aName]['columns']\n                    && Object.keys(config.layers[aName]['columns']).length > 0\n                ) {\n                    var lizcols = columns.slice(0, firstDisplayedColIndex);\n                    var newcolumns = columns.slice(firstDisplayedColIndex);\n\n                    var newpos = 0;\n                    // columns is an object with key as integer\n                    for (const key in config.layers[aName]['columns']) {\n                        const fieldname = config.layers[aName]['columns'][key];\n                        // Rearrange columns\n                        for (var i=0; i < newcolumns.length; i++) {\n                            // move item\n                            if ('data' in newcolumns[i] && newcolumns[i].data === fieldname) {\n                                // Move the item\n                                var cfrom = i;\n                                newcolumns.splice(newpos, 0, newcolumns.splice(cfrom,1)[0]);\n                                newpos+= 1;\n                            }\n                        }\n                    }\n\n                    var newcolumnsfinal = lizcols.concat(newcolumns)\n                    colToReturn['columns'] = newcolumnsfinal;\n                }\n\n                return colToReturn;\n            }\n\n\n            /**\n             *\n             * @param atFeatures\n             * @param isChild\n             * @param hiddenFields\n             * @param selectedFeatures\n             * @param layerId\n             * @param parentLayerID\n             * @param pivotId\n             *\n             * @returns {Promise}\n             */\n            function formatDatatableFeatures(atFeatures, isChild, hiddenFields, selectedFeatures, layerId, parentLayerID, pivotId = null){\n                const waitForIt = (delay) => {\n                    return new Promise((resolve) => setTimeout(resolve, delay));\n                }\n                const mapFeatures = (features, isChild, hiddenFields, selectedFeatures, layerId, parentLayerID, pivotId = null) => {\n                    return new Promise((resolve) => {\n                        const dataSet = [];\n                        const foundFeatures = {};\n\n                        features.forEach(function(feat) {\n                            const line = {};\n\n                            // add feature to layer global data\n                            const fid = feat.id.split('.')[1];\n                            foundFeatures[fid] = feat;\n\n                            // Add row ID\n                            line['DT_RowId'] = fid;\n                            line['lizSelected'] = 'z';\n\n                            if( selectedFeatures && selectedFeatures.indexOf(fid) != -1 )\n                                line.lizSelected = 'a';\n                            line['featureToolbar'] =\n                                `<lizmap-feature-toolbar ` +\n                                `value=\"${layerId + '.' + fid}\" ` +\n                                `${isChild ? `parent-layer-id=\"${parentLayerID}\"`: ''} ` +\n                                `${pivotId ? `pivot-layer=\"${pivotId}\"`: ''}>` +\n                                `</lizmap-feature-toolbar>`;\n\n                            // Build table lines\n                            for (var idx in feat.properties){\n                                if( (hiddenFields.indexOf(idx) > -1) )\n                                    continue;\n                                var prop = feat.properties[idx];\n                                if (typeof prop == 'string') {\n                                    prop = DOMPurify.sanitize(prop, {\n                                        ADD_ATTR: ['target']\n                                    });\n                                }\n                                line[idx] = prop;\n                            }\n\n\n                            dataSet.push( line );\n                        });\n\n                        resolve({\n                            'dataSet': dataSet,\n                            'foundFeatures': foundFeatures\n                        });\n                    });\n                }\n                return new Promise(async (resolve) => {\n                    const step = 500;\n                    let start = 0;\n                    let end = start+step;\n                    let found = -1;\n                    const timeout = 10;\n                    var dataSet = [];\n                    var foundFeatures = {};\n                    do {\n                        const features = atFeatures.slice(start, end);\n                        found = features.length;\n                        if (found != 0) {\n                            const result = await mapFeatures(features, isChild, hiddenFields, selectedFeatures, layerId, parentLayerID, pivotId);\n                            Object.assign(foundFeatures, result.foundFeatures);\n                            dataSet = dataSet.concat(result.dataSet);\n                            await waitForIt(timeout);\n                            start = end;\n                            end = start+step;\n                        }\n                    } while (found !== 0);\n                    resolve({\n                        'dataSet': dataSet,\n                        'foundFeatures': foundFeatures\n                    });\n                });\n            }\n\n            /**\n             *\n             * @param {string} aName  The layer name\n             * @param {string} aTable The HTML table selector\n             */\n            function bindTableLineClick(aName, aTable){\n                $(aTable +' tr').click(function() {\n\n                    $(aTable +' tr').removeClass('active');\n                    $(this).addClass('active');\n\n                    // Get corresponding feature\n                    var featId = this.querySelector('lizmap-feature-toolbar').fid;\n\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeaturehighlighted\",\n                        { 'sourceTable': aTable, 'featureType': aName, 'fid': featId}\n                    );\n\n                    // Display popup for the feature\n                    var lConfig = config.layers[aName];\n                    if( lConfig && lConfig['popup'] == 'True' ){\n                        var feat = lConfig['features'][featId];\n\n                        var parentLayerCleanName = aTable.replace('#attribute-layer-table-', '').split('-');\n                        parentLayerCleanName = parentLayerCleanName[0];\n\n                        $('#attribute-table-panel-' + parentLayerCleanName ).html('');\n\n                        lizMap.getFeaturePopupContent( aName, feat, function(data){\n                            $('#attribute-table-panel-' + parentLayerCleanName ).html(data);\n                            // Add the missing Bootstrap classes\n                            $('#attribute-table-panel-' + parentLayerCleanName + ' table').addClass('table table-condensed table-striped table-bordered');\n\n                            // Trigger event\n                            lizMap.events.triggerEvent('lizmappopupdisplayed_inattributetable'\n                            );\n\n                            var closeButton = '<a class=\"close-attribute-feature-panel pull-right\" href=\"#\"><i class=\"icon-remove\"></i></a>'\n                            $('#attribute-table-panel-' + parentLayerCleanName + ' h4').append(closeButton);\n\n                            $('#attribute-table-panel-' + parentLayerCleanName + ' h4 a.close-attribute-feature-panel').click(function(){\n                                // Hide panel\n                                $('#attribute-layer-main-' + parentLayerCleanName ).removeClass('reduced');\n                                $('#attribute-table-panel-' + parentLayerCleanName ).removeClass('visible').html('');\n                                // Deactivate Detail button\n                                $('#attribute-layer-'+ parentLayerCleanName + ' button.btn-detail-attributeTable').removeClass('btn-primary');\n\n                            });\n                        });\n                    }\n                });\n            }\n\n            /**\n             *\n             * @param childLayerName\n             * @param filter\n             * @param childTable\n             * @param forceEmptyTable\n             */\n            function getEditionChildData( childLayerName, filter, childTable, forceEmptyTable = false ){\n                getDataAndFillAttributeTable(childLayerName, filter, childTable, forceEmptyTable, () => {\n                    // Check edition capabilities\n                    var canCreateChildren = false;\n                    var canEdit = false;\n                    if ('editionLayers' in config && childLayerName in config.editionLayers) {\n                        var al = config.editionLayers[childLayerName];\n                        if (al.capabilities.createFeature == \"True\") {\n                            canCreateChildren = true;\n                        }\n                        if (al.capabilities.modifyAttribute == \"True\" || al.capabilities.modifyGeometry == \"True\") {\n                            canEdit = true;\n                        }\n                    }\n\n                    // Bind events when drawing table\n                    $( childTable ).one( 'draw.dt', function() {\n\n                        if( canEdit ) {\n                            // Add property on lizmap-feature-toolbar to edit children feature linked to a parent feature\n                            const parentFeatId = $(childTable).parents('div.tab-pane.attribute-layer-child-content')\n                                .find('input.attribute-table-hidden-parent-feature-id').val();\n                            $(childTable).DataTable().cells().nodes()\n                                .to$().children('lizmap-feature-toolbar').attr('parent-feature-id', parentFeatId);\n                        }\n\n                        if ( canCreateChildren ) {\n                            // Button to create feature linked to parent\n                            const createHeader = $($(childTable).DataTable().column(1).header());\n                            if ( createHeader.find('button.attribute-layer-feature-create').length == 0 ) {\n                                createHeader\n                                    .append(`<button class=\"btn btn-mini attribute-layer-feature-create\" value=\"-1\" title=\"${lizDict['attributeLayers.toolbar.btn.data.createFeature.title']}\">\n                                            <i class=\"icon-plus\"></i>\n                                        </button>`)\n                                    .on('click', 'button.attribute-layer-feature-create',function () {\n                                        var tabPane = $(this).parents('div.tab-pane.attribute-layer-child-content');\n                                        var parentFeatId = tabPane.find('input.attribute-table-hidden-parent-feature-id').val();\n                                        var parentLayerName = tabPane.find('input.attribute-table-hidden-parent-layer').val();\n                                        var layerName = tabPane.find('input.attribute-table-hidden-layer').val();\n                                        lizMap.getLayerFeature(parentLayerName, parentFeatId, function (parentFeat) {\n                                            var parentLayerId = config.layers[lizMap.getLayerNameByCleanName(parentLayerName)]['id'];\n                                            var lid = config.layers[lizMap.getLayerNameByCleanName(layerName)]['id'];\n                                            // n to m relations check\n                                            var pivotId = getPivotIdFromRelatedLayers(lid, parentLayerId);\n\n                                            lizMap.launchEdition(lid, null, { layerId: parentLayerId, feature: parentFeat, pivotId: pivotId });\n                                        });\n                                        return false;\n                                    });\n                            }\n                        }\n\n                        // Display the first child table displayed\n                        if ( $(childTable).parents('.edition-children-content').children('ul.nav-tabs').children('li.active').length == 0 ) {\n                            var tabId = $(childTable).parents('.tab-pane.attribute-layer-child-content').attr('id');\n                            $(childTable).parents('.edition-children-content').find('ul.nav-tabs > li > a[href=\"#'+tabId+'\"]').click();\n                        }\n                        return false;\n\n                    });\n                });\n            }\n\n\n            // Deprecated, use getDataAndFillAttributeTable() instead\n            /**\n             *\n             * @param aName\n             * @param aFilter\n             * @param aFeatureID\n             * @param aGeometryName\n             * @param aCallBack\n             */\n            function getAttributeFeatureData(aName, aFilter, aFeatureID, aGeometryName, aCallBack){\n\n                aFilter = typeof aFilter !== 'undefined' ?  aFilter : null;\n                aFeatureID = typeof aFeatureID !== 'undefined' ?  aFeatureID : null;\n                aGeometryName  = typeof aGeometryName !== 'undefined' ?  aGeometryName : 'extent';\n                aCallBack = typeof aCallBack !== 'undefined' ?  aCallBack : null;\n\n                // get layer configs\n                if ( !(aName in config.layers) ) {\n                    var qgisName = lizMap.getNameByCleanName(aName);\n                    if ( qgisName && (qgisName in config.layers)) {\n                        aName = qgisName;\n                    } else {\n                        console.log('getAttributeFeatureData: \"'+aName+'\" and \"'+qgisName+'\" not found in config');\n                        return false;\n                    }\n                }\n                var aConfig = config.layers[aName];\n                var atConfig = null;\n                if( aName in config.attributeLayers )\n                    atConfig = config.attributeLayers[aName];\n\n                var limitDataToBbox = false;\n                if ( 'limitDataToBbox' in config.options && config.options.limitDataToBbox == 'True'){\n                    limitDataToBbox = true;\n                }\n                lizMap.getFeatureData(aName, aFilter, aFeatureID, aGeometryName, limitDataToBbox, null, null, aCallBack);\n                return true;\n            }\n\n            /**\n             *\n             * @param featureType\n             * @param featId\n             * @param rupdateDrawing\n             */\n            function refreshLayerSelection( featureType, featId, rupdateDrawing ) {\n                // Set function parameters if not given\n                rupdateDrawing = typeof rupdateDrawing !== 'undefined' ?  rupdateDrawing : null;\n\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                // Add or remove feature id from the selectedFeatures\n                if( $.inArray( featId, config.layers[featureType]['selectedFeatures'] ) == -1 ) {\n                    config.layers[featureType]['selectedFeatures'].push( featId );\n                }else{\n                    var idx = $.inArray( featId, config.layers[featureType]['selectedFeatures'] );\n                    config.layers[featureType]['selectedFeatures'].splice( idx, 1 );\n                }\n\n                lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['selectedFeatures'],\n                        'updateDrawing': rupdateDrawing\n                    }\n                );\n\n            }\n\n            /**\n             *\n             * @param featureType\n             * @param supdateDrawing\n             */\n            function setSelectedFeaturesFromSearchedFilter( featureType, supdateDrawing ) {\n                // Set function parameters if not given\n                supdateDrawing = typeof supdateDrawing !== 'undefined' ?  supdateDrawing : true;\n\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                var hasChanged = false;\n                // Add filtered featured\n                $('.attribute-table-table[id]').each(function(){\n                    var tableId = $(this).attr('id');\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n                    // Get parent table for the feature type\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n\n                        var sIds = [];\n                        var rTable = $(this).DataTable();\n                        var filteredrowids = rTable.rows( {\"filter\":\"applied\"} ).ids();\n                        for ( var i = 0; i < filteredrowids.length; i++ ) {\n                            sIds.push( filteredrowids[i] );\n                        }\n                        config.layers[featureType]['selectedFeatures'] = sIds;\n                        hasChanged = true;\n                    }\n                })\n\n                if( hasChanged ){\n                    lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                        {\n                            'featureType': featureType,\n                            'featureIds': config.layers[featureType]['selectedFeatures'],\n                            'updateDrawing': supdateDrawing\n                        }\n                    );\n                }\n            }\n\n            /**\n             *\n             * @param featureType\n             * @param arefresh\n             */\n            function emptyLayerSelection( featureType, arefresh ) {\n                // Set function parameters if not given\n                arefresh = typeof arefresh !== 'undefined' ?  arefresh : true;\n\n                // Empty array\n                config.layers[featureType]['selectedFeatures'] = [];\n\n                lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['selectedFeatures'],\n                        'updateDrawing': arefresh\n                    }\n                );\n            }\n\n            /**\n             *\n             * @param featureType\n             * @param featId\n             */\n            function refreshLayerFilter( featureType, featId ) {\n                // Assure filteredFeatures property exists for the layer\n                if( !config.layers[featureType]['filteredFeatures'] )\n                    config.layers[featureType]['filteredFeatures'] = [];\n\n                // Add or remove feature id from the filteredFeatures\n                if( $.inArray( featId, config.layers[featureType]['filteredFeatures'] ) == -1 ) {\n                    config.layers[featureType]['filteredFeatures'].push( featId );\n                }else{\n                    var idx = $.inArray( featId, config.layers[featureType]['filteredFeatures'] );\n                    config.layers[featureType]['filteredFeatures'].splice( idx, 1 );\n                }\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n            /**\n             *\n             * @param featureType\n             */\n            function emptyLayerFilter( featureType ) {\n                // Empty array\n                config.layers[featureType]['filteredFeatures'] = [];\n\n                lizMap.lizmapLayerFilterActive = null;\n\n                // Empty layer filter\n                config.layers[featureType]['request_params']['filter'] = null;\n                config.layers[featureType]['request_params']['exp_filter'] = null;\n                config.layers[featureType]['request_params']['filtertoken'] = null;\n\n                // Update layer state\n                lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(featureType).expressionFilter = null;\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n            /**\n             *\n             * @param featureType\n             */\n            function filterLayerFromSelectedFeatures( featureType ) {\n\n                if( !config.attributeLayers[featureType] )\n                    return false;\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                // Copy selected features as filtered features\n                config.layers[featureType]['filteredFeatures'] = config.layers[featureType]['selectedFeatures'].slice();\n\n                // Remove selection\n                emptyLayerSelection( featureType, false );\n\n                lizMap.lizmapLayerFilterActive = featureType;\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n            /**\n             *\n             * @param typeNamePile\n             * @param typeNameFilter\n             * @param typeNameDone\n             * @param cascade\n             */\n            function updateLayer( typeNamePile, typeNameFilter, typeNameDone,  cascade ){\n                if (typeNamePile.length == 0) {\n                    return;\n                }\n                cascade = typeof cascade !== 'undefined' ?  cascade : true;\n\n                // Get first elements of the pile and withdraw it from the pile\n                var typeName = typeNamePile.shift();\n\n                // Get corresponding filter\n                var aFilter = typeNameFilter[typeName];\n\n                // Apply filter and get children\n                if (aFilter) {\n                    applyLayerFilter( typeName, aFilter, typeNamePile, typeNameFilter, typeNameDone, cascade );\n                } else {\n                    applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade );\n                }\n\n                $('#layerActionUnfilter').toggle((lizMap.lizmapLayerFilterActive !== null));\n            }\n\n            /**\n             *\n             * @param relation\n             * @param typeNameDone\n             */\n            function buildChildParam( relation, typeNameDone ) {\n                var childLayerConfigA = lizMap.getLayerConfigById(\n                    relation.referencingLayer,\n                    config.attributeLayers,\n                    'layerId'\n                );\n\n                // if no config\n                if( !childLayerConfigA ) {\n                    return null;\n                }\n\n                var childLayerKeyName = childLayerConfigA[0];\n                var childLayerConfig = childLayerConfigA[1];\n\n                // Avoid typeName already done ( infinite loop )\n                if( $.inArray( childLayerKeyName, typeNameDone ) != -1 )\n                    return null;\n\n                // Check if it is a pivot table\n                var relationIsPivot = false;\n                if( 'pivot' in childLayerConfig\n                && childLayerConfig.pivot == 'True'\n                && childLayerConfig.layerId in config.relations.pivot\n                ){\n                    relationIsPivot = true;\n                }\n                // Build parameter for this child\n                var fParam = {\n                    'filter': null,\n                    'fieldToFilter': relation.referencingField,\n                    'parentField': relation.referencedField,\n                    'parentValues': [],\n                    'pivot': relationIsPivot,\n                    'otherParentTypeName': null,\n                    'otherParentRelation': null,\n                    'otherParentValues': []\n                };\n\n                return [childLayerKeyName, fParam];\n            }\n\n            /**\n             *\n             * @param typeNameId\n             * @param attributeLayerConfig\n             * @param typeNameDone\n             */\n            function getPivotParam( typeNameId, attributeLayerConfig, typeNameDone ) {\n                var isPivot = false;\n                var pivotParam = null;\n                if( 'pivot' in attributeLayerConfig\n                && attributeLayerConfig.pivot == 'True'\n                && attributeLayerConfig.layerId in config.relations.pivot\n                ){\n                    isPivot = true;\n                }\n\n                if (!isPivot) {\n                    return pivotParam;\n                }\n\n                var otherParentId = null;\n                var otherParentRelation = null;\n                var otherParentTypeName = null;\n\n                for( var rx in config.relations ){\n                // Do not take pivot object into account\n                    if( rx == 'pivot' )\n                        continue;\n                    // Do not get relation for parent layer (we are looking for other parents only)\n                    if( rx == typeNameId)\n                        continue;\n                    // Do not get relation for parent to avoid ( infinite loop otherwise )\n                    var otherParentConfig = lizMap.getLayerConfigById(\n                        rx,\n                        config.attributeLayers,\n                        'layerId'\n                    );\n                    if( otherParentConfig\n                    && $.inArray( otherParentConfig[0], typeNameDone ) != -1\n                    )\n                        continue;\n\n                    var aLayerRelations = config.relations[rx];\n\n                    for( var xx in aLayerRelations){\n                    // Only look at relations concerning typeName\n                        if( aLayerRelations[xx].referencingLayer != attributeLayerConfig.layerId)\n                            continue;\n\n                        otherParentId = rx;\n                        otherParentRelation = aLayerRelations[xx];\n\n                        var otherParentConfig = lizMap.getLayerConfigById(\n                            rx,\n                            config.attributeLayers,\n                            'layerId'\n                        );\n                        otherParentTypeName =  otherParentConfig[0];\n                    }\n                }\n\n                if( otherParentId && otherParentRelation){\n                    pivotParam = {};\n                    pivotParam['otherParentTypeName'] = otherParentTypeName;\n                    pivotParam['otherParentRelation'] = otherParentRelation;\n                    pivotParam['otherParentValues'] = [];\n                }\n\n                return pivotParam;\n            }\n\n            /**\n             *\n             * @param typeName\n             * @param typeNamePile\n             * @param typeNameFilter\n             * @param typeNameDone\n             * @param cascade\n             */\n            function applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade ){\n\n                // Add done typeName to the list\n                typeNameDone.push( typeName );\n\n                // **0** Prepare some variable. e.g. reset features stored in the layer config\n                var layerConfig = config.layers[typeName];\n                layerConfig['features'] = {};\n\n                // **1** Get children info\n                var typeNameId = layerConfig['id'];\n                var typeNameChildren = {};\n\n                var getAttributeLayerConfig = lizMap.getLayerConfigById(\n                    typeNameId,\n                    config.attributeLayers,\n                    'layerId'\n                );\n                var attributeLayerConfig = null;\n                if( getAttributeLayerConfig ) {\n                    attributeLayerConfig = getAttributeLayerConfig[1];\n                }\n\n                if( 'relations' in config\n                && typeNameId in config.relations\n                && cascade\n                ) {\n                // Loop through relations to get children data\n                    var layerRelations = config.relations[typeNameId];\n                    for( var lid in layerRelations ) {\n                        var relation = layerRelations[lid];\n                        var childParam = buildChildParam(relation, typeNameDone);\n\n                        // if no child param\n                        if( !childParam )\n                            continue;\n\n                        typeNameChildren[ childParam[0] ] = childParam[1];\n                    }\n                }\n\n                // ** ** If typeName is a pivot, add some info about the otherParent\n                // If pivot, re-loop relations to find configuration for other parents (go up)\n                var pivotParam = getPivotParam( typeNameId, attributeLayerConfig, typeNameDone );\n\n                // **3** Apply filter to the typeName and redraw if necessary\n                layerConfig['request_params']['filter'] = null;\n                layerConfig['request_params']['exp_filter'] = null;\n                layerConfig['request_params']['filtertoken'] = null;\n\n                // Update layer state\n                lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(layerConfig.name).expressionFilter = null;\n\n                // Refresh attributeTable\n                var opTable = '#attribute-layer-table-'+lizMap.cleanName( typeName );\n                if( $( opTable ).length ){\n                    getDataAndRefreshAttributeTable(typeName, null, opTable);\n                }\n\n                // And send event so that getFeatureInfo and getPrint use the updated layer filters\n                lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                    {\n                        'featureType': typeName,\n                        'filter': null,\n                        'updateDrawing': true\n                    }\n                );\n\n                // **4** build children filters\n                if( cascade ) {\n                    for( var x in typeNameChildren ){\n                        typeNameFilter[x] = null;\n                        typeNamePile.push( x );\n                    }\n                }\n\n                // **5** Add other parent to pile when typeName is a pivot\n                if( pivotParam ){\n                    // console.log(pivotParam);\n                    // Add a Filter to the \"other parent\" layers\n                    config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filter'] = null;\n                    config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['exp_filter'] = null;\n                    config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filtertoken'] = null;\n\n                    // Update layer state\n                    lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(pivotParam['otherParentTypeName']).expressionFilter = null;\n\n                    typeNameFilter[ pivotParam['otherParentTypeName'] ] = null;\n                    typeNamePile.push( pivotParam['otherParentTypeName'] );\n                }\n\n                // **6** Launch the method again if typeName is not empty\n                if( typeNamePile.length > 0 ) {\n                    updateLayer( typeNamePile, typeNameFilter, typeNameDone, cascade );\n                }\n\n            }\n\n            /**\n             *\n             * @param typeName\n             * @param aFilter\n             * @param typeNamePile\n             * @param typeNameFilter\n             * @param typeNameDone\n             * @param cascade\n             */\n            function applyLayerFilter( typeName, aFilter, typeNamePile, typeNameFilter, typeNameDone, cascade ){\n                if (!aFilter) {\n                    applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade );\n                    return;\n                }\n\n                // Add done typeName to the list\n                typeNameDone.push( typeName );\n\n                // Get features to refresh attribute table AND build children filters\n                var geometryName = 'extent';\n                lizMap.getFeatureData(typeName, aFilter, null, geometryName, false, null, null,\n                    function (aName, aNameFilter, aNameFeatures, aNameAliases, aNameTypes ){\n\n                        // **0** Prepare some variable. e.g. reset features stored in the layer config\n                        var layerConfig = config.layers[typeName];\n                        layerConfig['features'] = {};\n                        var foundFeatures = {};\n                        const wmsName = layerConfig?.shortname || layerConfig.name;\n\n                        // **1** Get children info\n                        var cFeatures = aNameFeatures;\n                        var typeNameId = layerConfig['id'];\n                        var typeNamePkey = config.attributeLayers[typeName]['primaryKey'];\n                        var typeNamePkeyValues = [];\n                        var typeNameChildren = {};\n\n                        var getAttributeLayerConfig = lizMap.getLayerConfigById(\n                            typeNameId,\n                            config.attributeLayers,\n                            'layerId'\n                        );\n                        var attributeLayerConfig = null;\n                        if( getAttributeLayerConfig )\n                            attributeLayerConfig = getAttributeLayerConfig[1];\n\n                        if( 'relations' in config\n                    && typeNameId in config.relations\n                    && cascade\n                        ) {\n                            // Loop through relations to get children data\n                            var layerRelations = config.relations[typeNameId];\n                            for( var lid in layerRelations ) {\n\n                                var relation = layerRelations[lid];\n                                var childParam = buildChildParam(relation, typeNameDone);\n\n                                // if no child param\n                                if( !childParam )\n                                    continue;\n\n                                typeNameChildren[ childParam[0] ] = childParam[1];\n\n                            }\n                        }\n\n                        // ** ** If typeName is a pivot, add some info about the otherParent\n                        // If pivot, re-loop relations to find configuration for other parents (go up)\n                        var pivotParam = getPivotParam( typeNameId, attributeLayerConfig, typeNameDone );\n\n                        // **2** Loop through features && get children filter values\n                        var filteredFeatures = [];\n\n                        cFeatures.forEach(function(feat) {\n\n                            // Add feature to layer config data\n                            var fid = feat.id.split('.')[1];\n                            foundFeatures[fid] = feat;\n\n                            // extract and format PK\n                            var pkTypeIsString = ('types' in layerConfig)\n                                && (typeNamePkey in layerConfig.types)\n                                && layerConfig.types[typeNamePkey] == 'string';\n                            var pk = sqlEscapeFilter(feat.properties[typeNamePkey], pkTypeIsString);\n\n                            // Add primary keys values to build the WMS filter ( to be able to redraw layer)\n                            typeNamePkeyValues.push( pk );\n\n                            // Reset filteredFeatures with found features\n                            filteredFeatures.push( fid );\n\n                            // Loop through found children to build filter\n                            // Only if aFilter (original typeName filter) is not null\n                            if( cascade && aFilter ){\n                                for( var x in typeNameChildren ){\n                                    // Get the parent values to be able to build the filter\n                                    var cData = typeNameChildren[x];\n                                    typeNameChildren[x]['parentValues'].push( \"'\" + feat.properties[ cData['parentField'] ] + \"'\" );\n                                }\n                            }\n\n                            // If pivot, we need also to get the values to filter the other parent\n                            if( pivotParam && aFilter ){\n                                var referencingField = pivotParam['otherParentRelation'].referencingField;\n                                pivotParam['otherParentValues'].push( \"'\" + feat.properties[ referencingField ] + \"'\" );\n                            }\n                        });\n\n                        // **3** Apply filter to the typeName and redraw if necessary\n                        layerConfig['features'] = foundFeatures;\n                        layerConfig['alias'] = aNameAliases;\n\n                        var lFilter = null;\n\n                        // Add false value to hide all features if we need to hide layer\n                        if( typeNamePkeyValues.length == 0 )\n                            typeNamePkeyValues.push('-99999');\n\n                        if( aFilter ){\n                            // The values must be separated by comma AND spaces\n                            // since QGIS controls the syntax for the FILTER parameter\n                            lFilter = wmsName + ':\"' + typeNamePkey + '\" IN ( ' + typeNamePkeyValues.join( ' , ' ) + ' ) ';\n\n                            // Try to use the simple filter ( for example myforeignkey = 4 )\n                            // instead of the full list of pkeys we got from wfs\n                            // This can prevent too long GET URL\n                            // NB : we should improve this by using server side filters\n                            if( !aFilter.startsWith('$id') ){\n                                var simpleFilter = aFilter;\n                                if( !aFilter.startsWith(wmsName) ){\n                                    simpleFilter = wmsName + ':' + aFilter ;\n                                }\n                                lFilter = simpleFilter;\n                            }\n                        }\n\n                        layerConfig['request_params']['filter'] = lFilter;\n                        layerConfig['request_params']['exp_filter'] = aFilter;\n\n                        // Add filter to openlayers layer\n                        if( aFilter ){\n                            // Get filter token\n                            fetch(globalThis['lizUrls'].service, {\n                                method: \"POST\",\n                                body: new URLSearchParams({\n                                    service: 'WMS',\n                                    request: 'GETFILTERTOKEN',\n                                    typename: wmsName,\n                                    filter: lFilter\n                                })\n                            }).then(response => {\n                                return response.json();\n                            }).then(result => {\n                                layerConfig['request_params']['filtertoken'] = result.token;\n\n                                // Update layer state\n                                lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(layerConfig.name).filterToken = {\n                                    expressionFilter: layerConfig['request_params']['exp_filter'],\n                                    token: result.token\n                                };\n                            });\n                        } else {\n                            layerConfig['request_params']['filtertoken'] = null;\n\n                            // Update layer state\n                            lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(layerConfig.name).expressionFilter = null;\n                        }\n\n                        // Refresh attributeTable\n                        var opTable = '#attribute-layer-table-'+lizMap.cleanName( typeName );\n                        if( $( opTable ).length ){\n                            refreshLayerAttributeDatatable(typeName, opTable, cFeatures);\n                        }\n\n                        // And send event so that getFeatureInfo and getPrint use the updated layer filters\n                        lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                            {\n                                'featureType': typeName,\n                                'filter': lFilter,\n                                'updateDrawing': true\n                            }\n                        );\n\n                        // **4** build children filters\n                        if( cascade ) {\n                            for( var x in typeNameChildren ){\n                                var cName = x;\n                                var cData = typeNameChildren[x];\n                                var cFilter = null;\n                                var cExpFilter = null;\n\n                                // Build filter for children\n                                // and add child to the typeNameFilter and typeNamePile objects\n                                // only if typeName filter aFilter was originally set\n                                if( aFilter && cData['parentValues'].length > 0 && cascade != 'removeChildrenFilter' ) {\n                                    // The values must be separated by comma AND spaces\n                                    // since QGIS controls the syntax for the FILTER parameter\n                                    cExpFilter = '\"' + cData['fieldToFilter'] + '\" IN ( ' + cData['parentValues'].join( ' , ' ) + ' )';\n                                }\n                                else if( aFilter && cascade != 'removeChildrenFilter' ) {\n                                    cExpFilter = '\"' + cData['fieldToFilter'] + '\" IN ( -99999 )';\n                                }\n                                const cLayerConfig = config.layers[cName];\n                                const cWmsName = cLayerConfig?.shortname || cLayerConfig.name;\n                                cFilter = cWmsName + ':' + cExpFilter;\n\n                                cLayerConfig['request_params']['filter'] = cFilter;\n                                cLayerConfig['request_params']['exp_filter'] = cExpFilter;\n\n                                // Update layer state\n                                lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(cName).expressionFilter = cExpFilter;\n\n                                typeNameFilter[x] = cExpFilter;\n                                typeNamePile.push( x );\n\n                            }\n                        }\n\n                        // **5** Add other parent to pile when typeName is a pivot\n                        if( pivotParam ){\n                            // Add a Filter to the \"other parent\" layers\n                            var cFilter = null;\n                            // The stored filter in this variable cExpFilter must not be prefixed by the layername\n                            // since it is used to build the EXP_FILTER parameter\n                            // the cFilter will be based on this value but with the layer name as prefix\n                            var cExpFilter = null;\n                            var orObj = null;\n\n                            if( aFilter  ){\n                                if( pivotParam['otherParentValues'].length > 0 ){\n                                    cExpFilter = '\"' + pivotParam['otherParentRelation'].referencedField + '\"';\n                                    // The values must be separated by comma AND spaces\n                                    // since QGIS controls the syntax for the FILTER parameter\n                                    cExpFilter+= ' IN ( ' + pivotParam['otherParentValues'].join( ' , ' ) + ' )';\n                                    cFilter = wmsName + ':' + cExpFilter;\n                                    orObj = {\n                                        field: pivotParam['otherParentRelation'].referencedField,\n                                        values: pivotParam['otherParentValues']\n                                    }\n                                }\n                                else {\n                                    cExpFilter = '\"' + pivotParam['otherParentRelation'].referencedField + '\" IN ( ' + \"'-999999'\" + ' )';\n                                    cFilter = wmsName + ':' + cExpFilter;\n                                    orObj = {\n                                        field: pivotParam['otherParentRelation'].referencedField,\n                                        values: ['-999999']\n                                    }\n                                }\n                            }\n                            config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filter'] = cFilter;\n                            config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['exp_filter'] = cExpFilter;\n\n                            // Update layer state\n                            lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(pivotParam['otherParentTypeName']).expressionFilter = cExpFilter;\n\n                            // The stored filter in this variable must not be prefixed by the layername\n                            // since it is used to build the EXP_FILTER parameter\n                            // the FILTER will be based on this value but with the layer name as prefix\n                            typeNameFilter[ pivotParam['otherParentTypeName'] ] = cExpFilter;\n                            typeNamePile.push( pivotParam['otherParentTypeName'] );\n                        }\n\n                        // **6** Launch the method again if typeName is not empty\n                        if( typeNamePile.length > 0 ) {\n                            updateLayer( typeNamePile, typeNameFilter, typeNameDone, cascade );\n                        }\n                    });\n            }\n\n            /**\n             *\n             * @param layerId\n             * @param featureId\n             */\n            function deleteEditionFeature( layerId, featureId ){\n                var eConfig = lizMap.getLayerConfigById(\n                    layerId,\n                    config.editionLayers,\n                    'layerId'\n                );\n                var deleteConfirm = '';\n                if( eConfig )\n                    deleteConfirm += config.layers[eConfig[0]].title;\n                if( config.layers[eConfig[0]]\n                    && config.layers[eConfig[0]]['features']\n                    && config.layers[eConfig[0]]['features'][featureId]\n                ){\n                    var eProp = config.layers[eConfig[0]]['features'][featureId].properties;\n                    for( var y in eProp ){\n                        deleteConfirm+= '  \\n\"' + y + '\": ' + eProp[y] ;\n                    }\n\n                }\n                lizMap.deleteEditionFeature( layerId, featureId, deleteConfirm, function( aLID, aFID ){\n                    // Check if the map and tables must be refreshed after this deletion\n                    var featureType = eConfig[0];\n                    var cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                    // Get filter status for the layer concerned by the edition\n                    var hasFilter = false;\n                    if(\n                        ('filteredFeatures' in config.layers[featureType] && config.layers[featureType]['filteredFeatures'].length > 0 )\n                        || ( 'request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['filter'] )\n                        || ( 'request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['exp_filter'] )\n                    ){\n                        hasFilter = true;\n                    }\n                    if( hasFilter && lizMap.lizmapLayerFilterActive && cascadeToChildren ){\n                        var parentFeatureType = lizMap.lizmapLayerFilterActive;\n                        updateMapLayerDrawing( parentFeatureType, cascadeToChildren );\n                    }\n                });\n            }\n\n            /**\n             *\n             * @param featureType\n             * @param cascade\n             */\n            function updateMapLayerDrawing( featureType, cascade ){\n                cascade = typeof cascade !== 'undefined' ?  cascade : true;\n                // Get layer config\n                var lConfig = config.layers[featureType];\n                if( !lConfig ){\n                    return;\n                }\n\n                // Build filter from filteredFeatures\n                var cFilter = null;\n                if (lConfig?.['filteredFeatures']?.length) {\n                    // The values must be separated by comma AND spaces\n                    // since QGIS controls the syntax for the FILTER parameter\n                    cFilter = '$id IN ( ' + sqlEscapeFilter(lConfig['filteredFeatures']) + ' ) ';\n                }\n\n                const wmsName = lConfig?.['shortname'] || featureType;\n\n                // Build selection parameter from selectedFeatures\n                if( lConfig?.['selectedFeatures']?.length) {\n                    lConfig['request_params']['selection'] = wmsName + ':' + lConfig['selectedFeatures'].join();\n\n                    // Get selection token\n                    fetch(globalThis['lizUrls'].service, {\n                        method: \"POST\",\n                        body: new URLSearchParams({\n                            service: 'WMS',\n                            request: 'GETSELECTIONTOKEN',\n                            typename: wmsName,\n                            ids: lConfig.selectedFeatures.join()\n                        })\n                    }).then(response => {\n                        return response.json();\n                    }).then(result => {\n                        lConfig.request_params['selectiontoken'] = result.token;\n                        // Update layer state\n                        lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(lConfig.name).selectionToken = {\n                            selectedFeatures: lConfig.selectedFeatures,\n                            token: result.token\n                        };\n                    });\n                }\n                else {\n                    lConfig['request_params']['selection'] = null;\n                    lConfig['request_params']['selectiontoken'] = null;\n\n                    lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(lConfig.name).selectedFeatures = null;\n                }\n\n                // Build data to update layer drawing and other components\n                var typeNamePile = [ featureType ];\n                var typeNameFilter = {};\n                typeNameFilter[featureType] = cFilter;\n                var typeNameDone = [];\n                updateLayer(typeNamePile, typeNameFilter, typeNameDone,  cascade );\n            }\n\n            /**\n             *\n             * @param featureType\n             */\n            function updateMapLayerSelection(featureType) {\n                // Get layer config\n                var lConfig = config.layers[featureType];\n                if (!lConfig){\n                    return;\n                }\n\n                const wmsName = lConfig?.['shortname'] || featureType;\n\n                // Build selection parameter from selectedFeatures\n                if (lConfig?.selectedFeatures?.length) {\n                    if (!('request_params' in lConfig)) {\n                        lConfig['request_params'] = {};\n                    }\n                    lConfig.request_params['selection'] = wmsName + ':' + lConfig.selectedFeatures.join();\n\n                    // Get selection token\n                    fetch(globalThis['lizUrls'].service, {\n                        method: \"POST\",\n                        body: new URLSearchParams({\n                            service: 'WMS',\n                            request: 'GETSELECTIONTOKEN',\n                            typename: wmsName,\n                            ids: lConfig.selectedFeatures.join()\n                        })\n                    }).then(response => {\n                        return response.json();\n                    }).then(result => {\n                        lConfig.request_params['selectiontoken'] = result.token;\n                        // Update layer state\n                        lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(lConfig.name).selectionToken = {\n                            selectedFeatures: lConfig.selectedFeatures,\n                            token: result.token\n                        };\n                    });\n                } else {\n\n                    if (!('request_params' in lConfig)) {\n                        lConfig['request_params'] = {};\n                    }\n                    lConfig.request_params['selection'] = null;\n                    lConfig.request_params['selectiontoken'] = null;\n\n                    // Update layer state\n                    lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerByName(lConfig.name).selectedFeatures = null;\n                }\n            }\n\n            /**\n             *\n             * @param featureType\n             */\n            function updateAttributeTableTools( featureType ){\n\n                // Show unselect and filter buttons if some features are selected\n                var selIds = config.layers[featureType]['selectedFeatures'];\n                var filIds = config.layers[featureType]['filteredFeatures'];\n                var cleanName = lizMap.cleanName(featureType);\n                // UnSelection button and move selection to top\n                if( selIds && selIds.length > 0 ){\n                    $('button.btn-unselect-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n                    $('button.btn-moveselectedtotop-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n                }\n                else{\n                    $('button.btn-unselect-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden');\n                    $('button.btn-moveselectedtotop-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden');\n                }\n\n                // Filter button\n\n                // Hide it first and remove active classes\n                $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden').removeClass('btn-primary');\n\n                // Then display it only if:\n                // * no other features is active and selected items exists for this layer\n                // * or this is the layer for which it is active\n                if( ( !lizMap.lizmapLayerFilterActive && selIds && selIds.length > 0)\n                    || lizMap.lizmapLayerFilterActive == featureType\n                ){\n                    $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n\n                    // Show button as activated if some filter exists\n                    if( filIds && filIds.length > 0 )\n                        $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').addClass('btn-primary');\n                }\n\n            }\n\n            /**\n             *\n             * @param featureType\n             * @param featureIds\n             */\n            function redrawAttributeTableContent( featureType, featureIds ){\n                // Loop through all datatables to get the one concerning this featureType\n                $('.attribute-table-table[id]').each(function(){\n                    var tableId = $(this).attr('id');\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n                        // Get selected feature ids if not given\n                        if( !featureIds ){\n                            // Assure selectedFeatures property exists for the layer\n                            if( !config.layers[featureType]['selectedFeatures'] )\n                                config.layers[featureType]['selectedFeatures'] = [];\n                            var featureIds = config.layers[featureType]['selectedFeatures'];\n                        }\n\n                        // Get Datatable api\n                        var rTable = $(this).DataTable();\n                        var dTable = $(this).dataTable();\n\n                        // Remove class selected for all the lines\n                        rTable\n                            .rows( $(this).find('tr.selected') )\n                            .every(function(){\n                                dTable.fnUpdate( 'z', this, 0, false, false );\n                            })\n                        //~ .draw()\n                            .nodes()\n                            .to$()\n                            .removeClass( 'selected' )\n                        ;\n\n                        // Add class selected from featureIds\n                        // And change lizSelected column value to a\n                        if( featureIds.length > 0 ){\n\n                            var rTable = $(this).DataTable();\n                            rTable.data().each( function(d){\n                                if( $.inArray( d.DT_RowId.toString(), featureIds ) != -1 )\n                                    d.lizSelected = 'a';\n                            });\n                            rTable\n                                .rows( function ( idx, data, node ) {\n                                    return data.lizSelected == 'a' ? true : false;\n                                })\n                                .nodes()\n                                .to$()\n                                .addClass( 'selected' )\n                            ;\n                        }\n                    }\n\n                });\n            }\n\n            /**\n             *\n             * @param featureType\n             */\n            function refreshTablesAfterEdition( featureType ){\n                // Loop through each datatable, and refresh if it corresponds to the layer edited\n                $('.attribute-table-table[id]').each(function(){\n                    // get table id\n                    var tableId = $(this).attr('id');\n                    // verifying the id\n                    if ( !tableId )\n                        return true;\n\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n                        var zTable = '#' + tableId;\n                        var parentTable = zTable;\n                        var parentLayerCleanName = tableLayerName;\n                        var parentLayerName = featureType;\n                        var zClassNames = $(zTable).attr('class').split(' ');\n                        for(var zKey=0; zKey<zClassNames.length; zKey++) {\n                            if( !zClassNames[zKey].match('child-of-'))\n                                continue;\n\n                            parentLayerCleanName = zClassNames[zKey].substring('child-of-'.length);\n                            parentTable = '#attribute-layer-table-' + parentLayerCleanName;\n                            parentLayerName = attributeLayersDic[parentLayerCleanName];\n                            break;\n                        }\n                        // If child, re-highlight parent feature to refresh all the children\n                        // or update the edition table\n                        if( parentTable != zTable ){\n                            if( zTable.match('edition-table-') ) {\n                                // get info from the form\n                                var formFeatureId = $('#edition-form-container form input[name=\"liz_featureId\"]').val();\n                                var formLayerId = $('#edition-form-container form input[name=\"liz_layerId\"]').val();\n                                // get parent layer config\n                                var getParentLayerConfig = lizMap.getLayerConfigById( formLayerId );\n                                if ( (featureType in config.attributeLayers) && parentLayerName == getParentLayerConfig[0] ) {\n                                    // get featureType layer config\n                                    var featureTypeConfig = config.attributeLayers[featureType];\n\n                                    // n to m checks\n                                    var pivotId = getPivotIdFromRelatedLayers(formLayerId, featureTypeConfig.layerId)\n\n                                    //get relation\n                                    var relation = getRelationInfo(formLayerId,featureTypeConfig.layerId);\n\n                                    if( relation != null || pivotId) {\n                                        lizMap.getLayerFeature(parentLayerName, formFeatureId, function(feat) {\n                                            var fp = feat.properties;\n                                            if (pivotId) {\n                                                const currentPivot = config.relations.pivot[pivotId];\n                                                const pivotConfig =  lizMap.getLayerConfigById(\n                                                    pivotId,\n                                                    config.layers,\n                                                    'id'\n                                                );\n                                                if( pivotConfig && pivotConfig[1] ){\n\n                                                    const referencedPivotField = currentPivot[formLayerId];\n                                                    const referencingPivotField = currentPivot[featureTypeConfig.layerId];\n                                                    const referencedFieldForFilter = config.relations[featureTypeConfig.layerId].filter((fil)=>{\n                                                        return fil.referencingLayer == pivotId\n                                                    })[0]?.referencedField;\n\n                                                    const childReferencedField = config.relations[featureTypeConfig.layerId].filter((rel)=>{\n                                                        return rel.referencingLayer == pivotId\n                                                    })[0]?.referencedField;\n\n                                                    if(referencedPivotField && referencingPivotField && referencedFieldForFilter && childReferencedField){\n                                                        const pWfsParam = {\n                                                            referencedPivotField : referencedPivotField,\n                                                            referencingPivotField : referencingPivotField,\n                                                            referencedFieldForFilter : referencedFieldForFilter\n                                                        }\n                                                        getPivotWFSFeatures(pivotId, pWfsParam, fp[childReferencedField]).then((filterString)=>{\n                                                            getEditionChildData(featureType, filterString, zTable, filterString ? false : true);\n                                                        })\n                                                    }\n                                                }\n                                            } else {\n                                                var filter = '\"' + relation.referencingField + '\" = ' + \"'\" + fp[relation.referencedField] + \"'\";\n                                                getEditionChildData( featureType, filter, zTable);\n                                            }\n\n                                        });\n                                    }\n                                }\n                            } else {\n                                var parentHighlighted = config.layers[parentLayerName]['highlightedFeature'];\n                                if( parentHighlighted )\n                                    $(parentTable +' tr#' + parentHighlighted).click();\n                            }\n                        }\n                        // Else refresh main table with no filter\n                        else{\n                            // If not pivot\n                            getDataAndFillAttributeTable(featureType, null, zTable, false);\n                        }\n                    }\n                });\n            }\n\n            /**\n             *\n             * @param container\n             */\n            function refreshDatatableSize(container){\n\n                var dtable = $(container).find('table.dataTable');\n                if ( dtable.length == 0 ) {\n                    return;\n                }\n\n                // Adapt height\n                var h = $(container + ' div.attribute-layer-content').height() ? $(container + ' div.attribute-layer-content').height() : 0;\n\n                h -= $(container + ' thead').height() ? $(container + ' thead').height() : 0;\n                h -= $(container + ' div.dataTables_paginate').height() ? $(container + ' div.dataTables_paginate').height() : 0;\n                h -= $(container + ' div.dataTables_filter').height() ? $(container + ' div.dataTables_filter').height() : 0;\n                h -= 20;\n\n                dtable.parent('div.dataTables_scrollBody').height(h);\n\n                // Width : adapt columns size\n                dtable.DataTable().tables().columns.adjust();\n            }\n\n            /**\n             *\n             * @param nlayerId\n             * @param referencingLayerConfig\n             */\n            function getPivotLinkedLayerConfiguration(nlayerId, referencingLayerConfig){\n                const refAttributeLayerConf = lizMap.getLayerConfigById( referencingLayerConfig.id, lizMap.config.attributeLayers, 'layerId' );\n\n                if (refAttributeLayerConf && refAttributeLayerConf[1]?.pivot == 'True' && config.relations?.pivot && referencingLayerConfig.id in config.relations.pivot && nlayerId in config.relations.pivot[referencingLayerConfig.id]){\n                    // get referenced layer for the parent layer\n                    const referencedLayer = Object.keys(config.relations.pivot[referencingLayerConfig.id]).filter((k)=>{ return k != nlayerId})\n                    var mLayerConfig = null;\n                    if (referencedLayer.length == 1) {\n                        mLayerConfig = lizMap.getLayerConfigById(\n                            referencedLayer[0],\n                            config.layers,\n                            'id'\n                        );\n\n                        if (mLayerConfig) {\n                            var currentPivot = config.relations.pivot[referencingLayerConfig.id];\n                            if (currentPivot) {\n                                const referencedPivotField = currentPivot[nlayerId];\n                                const referencingPivotField = currentPivot[referencedLayer[0]];\n                                const referencedFieldForFilter = config.relations[mLayerConfig[1].id].filter((fil)=>{\n                                    return fil.referencingLayer == referencingLayerConfig.id\n                                })[0]?.referencedField;\n\n                                if (referencedPivotField && referencingPivotField && referencedFieldForFilter) {\n                                    return {\n                                        config:mLayerConfig,\n                                        relation:{\n                                            referencedPivotField:referencedPivotField,\n                                            referencingPivotField:referencingPivotField,\n                                            referencedFieldForFilter:referencedFieldForFilter\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return null;\n            }\n\n            /**\n             *\n             * @param nlayerId\n             * @param mLayerId\n             */\n            function getPivotIdFromRelatedLayers(nlayerId, mLayerId){\n                // returns the pivotId starting from the related layers\n                // this method assumes that the mLayer and nLayer is related with n to m relation via a single pivot\n                // i.e. there is not n to m relation duplication\n                if (config.relations.pivot) {\n                    var pivotId = Object.keys(config.relations.pivot).filter((key)=>{\n                        return config.relations.pivot[key][mLayerId] != null && config.relations.pivot[key][nlayerId] != null;\n                    })[0] //<--- assumes that the couple father-childs belongs to a single pivot\n\n                    if (pivotId) {\n                        const refAttributeLayerConf = lizMap.getLayerConfigById( pivotId, lizMap.config.attributeLayers, 'layerId' );\n                        if(refAttributeLayerConf && refAttributeLayerConf[1]?.pivot == 'True'){\n                            // check if pivot is in relations for both layers\n                            const validRelation = [nlayerId,mLayerId].every((layerId)=>{\n                                return config.relations[layerId] && config.relations[layerId].filter((rlayer)=>{ return rlayer.referencingLayer == pivotId}).length == 1\n                            })\n                            if (validRelation)\n                                return pivotId;\n                        }\n                    }\n                }\n                return null;\n            }\n\n            /**\n             *\n             * @param pivotId\n             * @param wfsFields\n             * @param referencedFieldValue\n             */\n            async function getPivotWFSFeatures(pivotId, wfsFields, referencedFieldValue){\n\n                const pivotConfig =  lizMap.getLayerConfigById(\n                    pivotId,\n                    config.layers,\n                    'id'\n                );\n\n                let filterString = \"\", feats = {};\n                if( pivotConfig && pivotConfig[1] ){\n                    // the field on the pivot linked to the nLayer\n                    const referencedPivotField = wfsFields.referencedPivotField;\n                    // the field on the pivot linked to the mLayer\n                    const referencingPivotField = wfsFields.referencingPivotField;\n                    // the field on the mLayer linked the the pivot\n                    const referencedFieldForFilter = wfsFields.referencedFieldForFilter;\n\n                    const typeName = pivotConfig[1].typename;\n                    const wfsParams = {\n                        TYPENAME: typeName,\n                        GEOMETRYNAME: 'extent'\n                    };\n                    wfsParams['EXP_FILTER'] = '\"' + referencedPivotField + '\" = ' + \"'\" + referencedFieldValue + \"'\";\n                    if (config.options?.limitDataToBbox == 'True') {\n                        wfsParams['BBOX'] = lizMap.mainLizmap.map.getView().calculateExtent();\n                        wfsParams['SRSNAME'] = lizMap.mainLizmap.map.getView().getProjection().getCode();\n                    }\n\n                    const getFeatureRequest = lizMap.mainLizmap.wfs.getFeature(wfsParams);\n\n                    let results = await getFeatureRequest;\n\n                    if(results && results.features){\n\n                        const features = results.features;\n\n                        let filArray = [];\n                        features.forEach((feat)=>{\n                            var fid = feat.id.split('.')[1];\n                            feats[fid] = feat;\n                            if (feat.properties && feat.properties[referencingPivotField]) {\n                                filArray.push(feat.properties[referencingPivotField])\n                            }\n                        })\n                        if (filArray.length) {\n                            var fil = filArray.map(function(val){\n                                return '\"'+referencedFieldForFilter+'\" = \\''+val+'\\'';\n                            })\n                            filterString = fil.join(\" OR \");\n                        }\n                    }\n\n                }\n                pivotConfig[1].features = feats;\n\n                return filterString;\n            }\n\n            lizMap.refreshDatatableSize = function(container){\n                return refreshDatatableSize(container);\n            }\n\n            lizMap.events.on({\n\n                layerfeaturehighlighted: function(e) {\n                    config.layers[e.featureType]['highlightedFeature'] = e.fid;\n                    refreshChildrenLayersContent( e.sourceTable, e.featureType, e.fid );\n                },\n\n                layerfeatureselected: function(e) {\n                    refreshLayerSelection( e.featureType, e.fid, e.updateDrawing );\n                },\n\n                layerfeatureunselectall: function(e) {\n                    emptyLayerSelection( e.featureType, e.updateDrawing );\n                },\n\n                layerfeatureselectsearched: function(e) {\n                    setSelectedFeaturesFromSearchedFilter( e.featureType, e.updateDrawing );\n                },\n\n                layerfeaturefilterselected: function(e) {\n                    filterLayerFromSelectedFeatures( e.featureType );\n                },\n\n                layerfeatureremovefilter: function(e) {\n                    emptyLayerFilter( e.featureType );\n                },\n\n                layerSelectionChanged: function(e) {\n\n                    // Update attribute table tools\n                    updateAttributeTableTools( e.featureType );\n\n                    // Redraw attribute table content ( = add \"selected\" classes)\n                    redrawAttributeTableContent( e.featureType, e.featureIds );\n\n                    // Update openlayers layer drawing\n                    if( e.updateDrawing )\n                        updateMapLayerSelection( e.featureType );\n                },\n\n                layerFilteredFeaturesChanged: function(e) {\n\n                    // Update attribute table tools\n                    updateAttributeTableTools( e.featureType );\n\n                    // Update layer\n                    var cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                    if ( 'cascade' in e )\n                        cascadeToChildren = e.cascade;\n                    updateMapLayerDrawing( e.featureType, cascadeToChildren );\n\n                },\n\n                lizmapeditionfeaturecreated: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId, config.attributeLayers, 'layerId' );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) )\n                            return false;\n                        refreshTablesAfterEdition( featureType );\n                    }\n                },\n\n                lizmapeditionfeaturemodified: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) )\n                            return false;\n                        refreshTablesAfterEdition( featureType );\n                    }\n                },\n\n                lizmapeditionfeaturedeleted: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) ){\n                            return false;\n                        }\n                        refreshTablesAfterEdition( featureType );\n\n                        // Check if the map and tables must be refreshed after this deletion\n                        const cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                        // Get filter status for the layer concerned by the edition\n                        let hasFilter = false;\n                        if (\n                            ('filteredFeatures' in config.layers[featureType] && config.layers[featureType]['filteredFeatures'].length > 0)\n                            || ('request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['filter'])\n                            || ('request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['exp_filter'])\n                        ){\n                            hasFilter = true;\n                        }\n                        if (hasFilter && lizMap.lizmapLayerFilterActive && cascadeToChildren) {\n                            const parentFeatureType = lizMap.lizmapLayerFilterActive;\n                            updateMapLayerDrawing(parentFeatureType, cascadeToChildren);\n                        }\n                    } // todo : only remove line corresponding to deleted feature ?\n                },\n\n                // Filter layer when using \"Locate by layer\" tool\n                lizmaplocatefeaturechanged: function(e){\n                    if( !( e.featureType in config.attributeLayers) || startupFilter )\n                        return false;\n\n                    var aConfig = config.locateByLayer[e.featureType];\n                    var triggerFilterOnLocate = false;\n\n                    if( 'filterOnLocate' in aConfig && aConfig.filterOnLocate == 'True' )\n                        triggerFilterOnLocate = true;\n\n                    if( !triggerFilterOnLocate )\n                        return false;\n\n                    // Select feature\n                    lizMap.events.triggerEvent('layerfeatureselected',\n                        {'featureType': e.featureType, 'fid': e.featureId, 'updateDrawing': false}\n                    );\n                    // Filter selected feature\n                    lizMap.events.triggerEvent('layerfeaturefilterselected',\n                        {'featureType': e.featureType}\n                    );\n                },\n\n                lizmaplocatefeaturecanceled: function(e){\n\n                    lizMap.events.triggerEvent('layerfeatureremovefilter',\n                        {'featureType': e.featureType}\n                    );\n                },\n\n                // If there are some relations for the edited layer\n                // We add the children tables below or inside the form\n                lizmapeditionformdisplayed: function(e) {\n                    $('#edition-children-container').hide().html('');\n\n                    var fid =  e.featureId;\n\n                    // Do not display children tables (from QGIS relations)\n                    // if the form concerns a feature creation\n                    if ( !fid || fid == '' )\n                        return;\n\n                    // Get the edited layer ID\n                    var layerId = e.layerId;\n                    var getLayerConfig = lizMap.getLayerConfigById( layerId );\n\n                    // Check for relations\n                    if( getLayerConfig && 'relations' in lizMap.config && layerId in lizMap.config.relations ) {\n                        var relations = lizMap.config.relations[layerId];\n                        var featureType = getLayerConfig[0];\n                        var featureId = featureType + '.' + fid;\n                        if ( relations.length > 0 ) {\n\n                            // Build the HTML container for the children tables\n                            // which will be displayed under the form\n                            var childHtml = getChildrenHtmlContent( featureType );\n                            var html = '';\n\n                            // Add children content container\n                            if( childHtml ){\n                                // Add buttons to create new children\n                                if( childHtml['childCreateButton'] ) {\n                                    // Action bar\n                                    html+= '<div class=\"attribute-layer-action-bar\">';\n                                    html+= childHtml['childCreateButton'];\n                                    html+= '</div>';\n                                }\n\n                                // Add children content : one tab per childlayer\n                                html+= '<div class=\"tabbable edition-children-content\">';\n                                // UL content: the tabs title\n                                html+= '    <ul class=\"nav nav-tabs\">';\n                                for( var i in childHtml['tab-li'] ){\n                                    var cLi = childHtml['tab-li'][i];\n                                    html+= cLi;\n                                }\n                                html+= '    </ul>';\n\n                                // Tab content\n                                html+= '    <div class=\"tab-content\">';\n                                for( var i in childHtml['tab-content'] ){\n                                    var cDiv = childHtml['tab-content'][i];\n                                    html+= cDiv;\n                                }\n                                html+= '    </div>'; // tab-content\n                                html+= '</div>'; // tabbable\n                            }\n\n                            // Add the child container content HTML and show it\n                            $('#edition-children-container').show().append(html);\n\n                            // Add a hidden input containing the parent feature id\n                            $('#edition-children-container div.tabbable div.tab-pane input.attribute-table-hidden-parent-layer').after(\n                                '<input class=\"attribute-table-hidden-parent-feature-id\" value=\"'+fid+'\" type=\"hidden\">'\n                            );\n\n                            // Replace the id & href attributes of the children tabs\n                            // to distinguish them from the main attribute table menu (\"Data\")\n                            $('#edition-children-container div.tabbable ul.nav-tabs li').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/nav-tab-attribute-child-tab-/g, 'nav-tab-edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable ul.nav-tabs li a').each(function() {\n                                $(this).attr('href', $(this).attr('href').replace(/attribute-child-tab-/g, 'edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable div.tab-content div.tab-pane').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/attribute-child-tab-/g, 'edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable div.tab-content table').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/attribute-layer-/g, 'edition-'));\n                            });\n\n                            // Bind click on createFeature button\n                            // When clicked, we launch the edition of the child feature\n                            // and pass the parent ID\n                            $('#edition-children-container button.btn-createFeature-attributeTable')\n                                .click(function(){\n                                // Ask if we should really create a child\n                                // This is important, as the modified data in the parent form\n                                // will be losed if the user has not saved it\n                                    let confirm_msg = lizDict['edition.confirm.launch.child.creation'];\n                                    let confirmChildCreation = confirm(confirm_msg);\n                                    if (!confirmChildCreation) {\n                                        return false;\n                                    }\n                                    var parentLayerId = layerId;\n                                    var aName = attributeLayersDic[ $(this).val() ];\n                                    var pivotId = $(this).attr(\"data-pivot\");\n                                    lizMap.getLayerFeature(featureType, fid, function(parentFeat) {\n                                        var lid = config.layers[aName]['id'];\n                                        lizMap.launchEdition( lid, null, {layerId:parentLayerId, feature:parentFeat, pivotId: pivotId});\n                                    });\n                                    return false;\n                                })\n                                .hover(\n                                    function(){ $(this).addClass('btn-primary'); },\n                                    function(){ $(this).removeClass('btn-primary'); }\n                                );\n\n                            // Bind click on createFeature button via dropDown\n                            $('#edition-children-container a.btn-createFeature-attributeTable')\n                                .click(function(){\n                                    var parentLayerId = layerId;\n                                    var selectedValue = $(this).attr('href').replace('#', '');\n                                    var aName = attributeLayersDic[ selectedValue ];\n                                    lizMap.getLayerFeature(featureType, fid, function(parentFeat) {\n                                        var lid = config.layers[aName]['id'];\n                                        lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                                        $(this).blur();\n                                    });\n                                    return false;\n                                })\n                                .hover(\n                                    function(){ $(this).addClass('btn-primary'); },\n                                    function(){ $(this).removeClass('btn-primary'); }\n                                );\n\n                            // Fill the child attribute table with data from the layer with WFS\n                            lizMap.getLayerFeature(featureType, fid, function(feat) {\n                                var fp = feat.properties;\n                                for ( var i=0, len=relations.length; i<len; i++ ){\n                                    var r = relations[i];\n                                    var rLayerId = r.referencingLayer;\n                                    var rGetLayerConfig = lizMap.getLayerConfigById( rLayerId );\n                                    if ( rGetLayerConfig ) {\n                                        // check if relation is nToM\n                                        var isNToM = false, mLayerConfig = null;\n                                        // check if the referencingLayer is a pivot table\n                                        mLayerConfig = getPivotLinkedLayerConfiguration(layerId, rGetLayerConfig[1]);\n                                        if (mLayerConfig) {\n                                            // if the realtion is n to m, switch the layer config to the mLayer\n                                            rGetLayerConfig = mLayerConfig.config;\n                                            isNToM = true;\n                                        }\n\n                                        let rLayerName = rGetLayerConfig[0];\n                                        let rConfigLayer = rGetLayerConfig[1];\n                                        let filter = \"\";\n                                        // Get child table id\n                                        let parent_and_child = lizMap.cleanName(featureType) + '-' + lizMap.cleanName(rLayerName);\n                                        let childTable = '#edition-table-' + parent_and_child;\n                                        // Fill in attribute table for child\n                                        if(rLayerName in config.attributeLayers){\n                                            if (isNToM) {\n                                                getPivotWFSFeatures(r.referencingLayer, mLayerConfig.relation, fp[r.referencedField]).then((filterString)=>{\n                                                    getEditionChildData(rLayerName, filterString, childTable, filterString ? false : true);\n                                                })\n                                            } else {\n                                                filter = '\"' + r.referencingField + '\" = ' + \"'\" + fp[r.referencedField] + \"'\";\n                                                getEditionChildData( rLayerName, filter, childTable );\n                                            }\n                                        }\n\n                                        // Try to move the tables inside the parent form\n                                        // if we find dedicated containers coming from the \"drag&drop\" mode\n                                        // Get child attribute table id\n                                        var child_table_container = 'edition-child-tab-' + parent_and_child;\n                                        var target_div_selector = '#edition-form-container div.lizmap-form-relation[data-relation-id=\"';\n                                        target_div_selector += r.relationId + '\"]';\n                                        var target_div = $(target_div_selector);\n                                        $('#' + child_table_container).appendTo(target_div);\n\n                                        // Hide the tab in the UL of the bottom container\n                                        $('#nav-tab-edition-child-tab-' + parent_and_child).hide();\n\n                                        // Replace the label by the relation name if the relation widget label is empty\n                                        if (target_div.find('legend:first').text().trim() == '') {\n                                            target_div.find('legend:first').text(r.relationName);\n                                        }\n                                    }\n                                }\n\n                                // Hide the bottom tab container if its empty\n                                // (child tables have all been moved inside the form)\n                                let children_tab_content = $('div#edition-children-container div.tabbable.edition-children-content div.tab-content');\n                                if (children_tab_content.find('div.attribute-layer-child-content').length == 0) {\n                                    // Hide the button\n                                    $('#edition-children-container div.tabbable.edition-children-content').hide();\n                                }\n\n                            });\n                        }\n                    }\n                },\n\n                bottomdocksizechanged: function(evt) {\n                    var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                    refreshDatatableSize('#'+mycontainerId);\n                },\n                dockopened: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                dockclosed: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                rightdockopened: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                rightdockclosed: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                }\n\n            }); // lizMap.events.on end\n\n            // Extend lizMap API\n            lizMap.getAttributeFeatureData = getAttributeFeatureData;\n\n        } // uicreated\n    });\n\n}();\n"],"names":["entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","Object","freeze","seal","create","apply","construct","Reflect","x","fun","thisValue","args","Func","arrayForEach","unapply","Array","prototype","forEach","arrayLastIndexOf","lastIndexOf","arrayPop","pop","arrayPush","push","arraySplice","splice","stringToLowerCase","String","toLowerCase","stringToString","toString","stringMatch","match","stringReplace","replace","stringIndexOf","indexOf","stringTrim","trim","objectHasOwnProperty","hasOwnProperty","regExpTest","RegExp","test","typeErrorCreate","func","TypeError","_len2","arguments","length","_key2","thisArg","_len","_key","addToSet","set","array","transformCaseFunc","undefined","l","element","lcElement","cleanArray","index","clone","object","newObject","property","value","isArray","constructor","lookupGetter","prop","desc","get","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","html","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","CUSTOM_ELEMENT","EXPRESSIONS","__proto__","getGlobal","window","purify","createDOMPurify","DOMPurify","root","version","removed","document","nodeType","Element","isSupported","originalDocument","currentScript","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","NamedNodeMap","MozNamedAttrMap","HTMLFormElement","DOMParser","trustedTypes","ElementPrototype","cloneNode","remove","getNextSibling","getChildNodes","getParentNode","template","createElement","content","ownerDocument","trustedTypesPolicy","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","hooks","afterSanitizeAttributes","afterSanitizeElements","afterSanitizeShadowDOM","beforeSanitizeAttributes","beforeSanitizeElements","beforeSanitizeShadowDOM","uponSanitizeAttribute","uponSanitizeElement","uponSanitizeShadowNode","createHTMLDocument","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","tagNameCheck","writable","configurable","enumerable","attributeNameCheck","allowCustomizedBuiltInElements","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","SAFE_FOR_XML","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","CONFIG","formElement","isRegexOrFunction","testValue","Function","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ADD_DATA_URI_TAGS","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","table","tbody","TRUSTED_TYPES_POLICY","createHTML","createScriptURL","purifyHostElement","createPolicy","suffix","ATTR_NAME","hasAttribute","getAttribute","policyName","scriptUrl","_","console","warn","_createTrustedTypesPolicy","ALL_SVG_TAGS","ALL_MATHML_TAGS","_forceRemove","node","removeChild","_removeAttribute","name","attribute","getAttributeNode","from","removeAttribute","setAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","parseFromString","documentElement","createDocument","innerHTML","body","insertBefore","createTextNode","childNodes","call","_createNodeIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","SHOW_PROCESSING_INSTRUCTION","SHOW_CDATA_SECTION","_isClobbered","nodeName","textContent","attributes","namespaceURI","hasChildNodes","_isNode","_executeHooks","currentNode","data","hook","_sanitizeElements","tagName","allowedTags","firstElementChild","_isBasicCustomElement","parentNode","i","childClone","__removalCount","parent","parentTagName","Boolean","_checkValidNamespace","expr","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","forceKeepAttr","attr","getAttributeType","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","sanitize","importedNode","returnNode","appendChild","firstChild","nodeIterator","shadowroot","shadowrootmode","serializedHTML","outerHTML","doctype","setConfig","clearConfig","isValidAttribute","tag","addHook","entryPoint","hookFunction","removeHook","removeHooks","removeAllHooks","intRegex","sqlEscapeFilter","alwaysQuoteString","map","v","join","replaceAll","lizMap","events","on","config","hasAttributeTableLayers","layers","attributeLayersDic","wfsTypenameMap","mediaLinkPrefix","globalThis","media","URLSearchParams","params","startupFilter","lizLayerFilter","lizmapLayerFilterActive","limitDataToBbox","options","featureTypes","getVectorLayerFeatureTypes","$","css","attributeLayersSorted","lname","attributeLayers","al","sort","a","b","order","cleanName","featureType","typeName","layername","getNameByTypeName","mainLizmap","state","layersAndGroupsCollection","layerNames","includes","configLayerName","atConfig","layer","getLayerByName","isFiltered","expressionFilter","triggerEvent","loadProjDefinition","crs","aProj","OpenLayers","Projection","bbox","parseFloat","hide","hasDiplayedAttributeTable","tHtml","idx","lizDict","warnResolution","mapResolution","getView","getResolution","getMaxResolution","getMinResolution","msg","addMessage","getDataAndFillAttributeTable","layerName","filter","tableSelector","forceEmptyTable","callBack","layerConfig","shortname","typename","wfsParams","TYPENAME","GEOMETRYNAME","mapExtent","calculateExtent","mapExtent4326","transformExtent","getProjection","getCode","fetchRequests","wfs","getFeature","namedRequests","describeFeatureTypeRequest","describeFeatureType","allColumnsKeyValues","responseOrder","fieldName","keyValueConfig","fieldConf","type","getSourceLayer","getLayerConfigById","source_layer_id","source_typename","PROPERTYNAME","code_field","label_field","EXP_FILTER","exp_filter","buildLayerAttributeDatatable","aliases","types","style","cursor","Promise","all","then","responses","columnName","keys","find","key","keyField","valueField","keyValue","features","feature","properties","describeFeatureTypeResponse","columns","catch","buildLinkParameters","layerId","lp","getP","idSelected","fi","primaryKey","afeat","pk","getChildrenHtmlContent","parentLayerName","childHtml","childDiv","childLi","childCreateButton","childCreateButtonItems","layerLinkButton","layerLinkButtonItems","lConfig","parentLayerId","relations","layerRelations","childCount","childActive","lid","relation","referencingLayerConfig","referencingLayer","isNToM","pivotConfig","mLayerConfig","getPivotLinkedLayerConfiguration","childLayerConfig","childLayerName","childAttributeLayerConfig","tabId","cDiv","tId","tClass","cLi","title","canCreateChild","editionLayers","capabilities","createFeature","childButtonItem","id","click","this","val","getLayerNameByCleanName","liHtml","append","selClass","filClass","canPopup","canCreate","alc","exportLayers","exportFormats","getVectorLayerResultFormat","len","format","tooltip","placement","tabContentId","tab","e","target","DataTable","tables","adjust","removeClass","show","refreshDatatableSize","hover","addClass","parentDir","parents","toggleClass","toggle","hasClass","aName","aTable","dTable","previousOrder","grep","o","newOrder","concat","draw","scrollTop","eFormat","text","eName","exportVectorLayer","blur","creationContext","parentFidElement","querySelector","parentFeatId","fid","pivotId","launchEdition","getLayerFeature","parentFeat","selectedValue","cName","cId","attrConfig","p","pName","pId","doQuery","pivot","parId","par","parKey","chi","rp","rpItem","referencingField","service","edition","post","features1","features2","linkedId","pivotCfg","linkedKey","addLayerDiv","change","doCascade","updateAttributeTableTools","cascadeToChildren","updateMapLayerDrawing","btitle","timer","lizdelay","callback","ms","clearTimeout","setTimeout","refreshLayerAttributeDatatable","cFeatures","aCallback","isChild","parentLayerID","startsWith","split","hiddenFields","formatDatatableFeatures","ff","foundFeatures","dataSet","fn","dataTable","isDataTable","oTable","fnClearTable","fnAddData","cAliases","cTypes","parentLayerCleanName","pivotReference","highlightedFeature","parentLayerConfig","cleanname","getPivotIdFromRelatedLayers","canEdit","canDelete","modifyAttribute","modifyGeometry","deleteFeature","atFeatures","dataLength","cdc","firstDisplayedColIndex","colConf","columnKeyValues","row","meta","substring","slice","displayLabels","stringData","splitValues","s","splitValue","davConf","webDavUrl","resourceUrlReplacement","webdav","webDavFields","rdata","colMeta","settings","aoColumns","col","colToReturn","isEmptyObject","atc","lizcols","newcolumns","newpos","colx","fieldname","colhidden","hidden","cfrom","newcolumnsfinal","createDatatableColumns","refillFeatures","searchWhileTyping","myDom","searchVal","fnFilter","initComplete","json","Api","language","url","deferRender","createdRow","dataIndex","inArray","DT_RowId","lizSelected","drawCallback","thumbnailColl","getElementsByClassName","thumbnail","lizUrls","repository","project","dataset","src","dom","pageLength","scrollY","scrollX","next","focus","keyup","unbind","featId","feat","getFeaturePopupContent","bindTableLineClick","fetchEditableFeatures","selectedFeatures","waitForIt","delay","resolve","mapFeatures","line","async","start","end","found","result","assign","getEditionChildData","childTable","canCreateChildren","one","cells","nodes","to$","children","createHeader","column","header","tabPane","emptyLayerSelection","arefresh","updateLayer","typeNamePile","typeNameFilter","typeNameDone","cascade","shift","aFilter","getFeatureData","aNameFilter","aNameFeatures","aNameAliases","aNameTypes","wmsName","typeNameId","typeNamePkey","typeNamePkeyValues","typeNameChildren","getAttributeLayerConfig","attributeLayerConfig","childParam","buildChildParam","pivotParam","getPivotParam","filteredFeatures","pkTypeIsString","cData","lFilter","simpleFilter","fetch","method","request","response","token","filterToken","opTable","cFilter","cExpFilter","cLayerConfig","referencedField","applyEmptyLayerFilter","applyLayerFilter","childLayerConfigA","childLayerKeyName","relationIsPivot","isPivot","otherParentId","otherParentRelation","otherParentTypeName","rx","otherParentConfig","aLayerRelations","xx","getFeatureRequest","getDataAndRefreshAttributeTable","ids","request_params","selectionToken","selIds","filIds","refreshTablesAfterEdition","each","tableId","tableLayerName","prev","zTable","parentTable","zClassNames","zKey","formFeatureId","formLayerId","getParentLayerConfig","featureTypeConfig","childLayerId","lridx","getRelationInfo","fp","currentPivot","referencedPivotField","referencingPivotField","referencedFieldForFilter","fil","childReferencedField","rel","getPivotWFSFeatures","filterString","parentHighlighted","container","dtable","h","height","nlayerId","refAttributeLayerConf","referencedLayer","k","mLayerId","every","rlayer","wfsFields","referencedFieldValue","feats","results","filArray","layerfeaturehighlighted","sourceTable","childTableSelector","refreshChildrenLayersContent","layerfeatureselected","rupdateDrawing","refreshLayerSelection","updateDrawing","layerfeatureunselectall","layerfeatureselectsearched","supdateDrawing","hasChanged","sIds","filteredrowids","rows","setSelectedFeaturesFromSearchedFilter","layerfeaturefilterselected","filterLayerFromSelectedFeatures","layerfeatureremovefilter","layerSelectionChanged","featureIds","rTable","fnUpdate","d","updateMapLayerSelection","layerFilteredFeaturesChanged","lizmapeditionfeaturecreated","getLayer","lizmapeditionfeaturemodified","lizmapeditionfeaturedeleted","hasFilter","lizmaplocatefeaturechanged","aConfig","locateByLayer","triggerFilterOnLocate","filterOnLocate","featureId","lizmaplocatefeaturecanceled","lizmapeditionformdisplayed","getLayerConfig","after","confirm_msg","confirm","r","rLayerId","rGetLayerConfig","rLayerName","parent_and_child","child_table_container","target_div_selector","relationId","target_div","appendTo","relationName","bottomdocksizechanged","evt","dockopened","dockclosed","rightdockopened","rightdockclosed","getAttributeFeatureData","aFeatureID","aGeometryName","aCallBack","qgisName","getNameByCleanName","log"],"sourceRoot":""}