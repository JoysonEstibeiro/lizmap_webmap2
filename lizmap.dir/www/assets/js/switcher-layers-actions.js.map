{"version":3,"file":"switcher-layers-actions.js","mappings":"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","sources":["webpack://lizmap-web-client/./assets/src/legacy/switcher-layers-actions.js"],"sourcesContent":["/**\n * @module legacy/switch-layers-actions.js\n * @name Switch layer actions\n * @copyright 2023 3Liz\n * @license MPL-2.0\n */\n\nvar lizLayerActionButtons = function() {\n\n    var featureTypes = null;\n\n    /**\n     *\n     * @param html\n     */\n    function fillSubDock( html ){\n        $('#sub-dock').html( html );\n\n        // Style opacity button\n        $('#sub-dock a.btn-opacity-layer').each(function(){\n            var v = $(this).text();\n            var op = parseInt(v) / 100 - 0.3;\n            $(this).css('background-color', 'rgba(0,0,0,'+op+')' );\n            $(this).css('background-image', 'none');\n            $(this).css('text-shadow', 'none');\n            if( parseInt(v) > 60 )\n                $(this).css('color', 'lightgrey');\n        });\n\n        // activate link buttons\n        $('div.sub-metadata button.link')\n            .click(function(){\n                var self = $(this);\n                if (self.hasClass('disabled'))\n                    return false;\n                var windowLink = self.val();\n                // Test if the link is internal\n                var mediaRegex = /^(\\/)?media\\//;\n                if(mediaRegex.test(windowLink)){\n                    var mediaLink = globalThis['lizUrls'].media + '?' + new URLSearchParams(globalThis['lizUrls'].params);\n                    windowLink = mediaLink+'&path=/'+windowLink;\n                }\n                // Open link in a new window\n                window.open(windowLink);\n            });\n\n        $('#hide-sub-dock').click(function(){\n            var itemName = $(this).val();\n            var itemConfig = lizMap.config.layers[itemName];\n            var itemType = 'baselayer';\n            if('type' in itemConfig)\n                itemType = itemConfig.type;\n\n            lizMap.events.triggerEvent(\"lizmapswitcheritemselected\",\n                { 'name': itemName, 'type': itemType, 'selected': false}\n            );\n\n            document.querySelector('lizmap-treeview').itemNameSelected = undefined;\n        });\n    }\n\n    /**\n     *\n     * @param aName\n     */\n    function getLayerMetadataHtml( aName ){\n        var html = '';\n        var metadatas = {\n            title: aName,\n            type: 'layer',\n            abstract: null,\n            link: null,\n            styles: null,\n            isBaselayer: false,\n            actions: null\n        };\n        if( aName in lizMap.config.layers ){\n            var layerConfig = lizMap.config.layers[aName];\n            metadatas.title = layerConfig.title;\n            metadatas.type = layerConfig.type;\n            if( layerConfig.abstract )\n                metadatas.abstract = layerConfig.abstract;\n            if( layerConfig.link  )\n                metadatas.link = layerConfig.link;\n            if( layerConfig.styles && layerConfig.styles.length > 1 )\n                metadatas.styles = layerConfig.styles\n\n            // Add actions\n            let layerActions = lizMap.mainLizmap.action.getActions('layer', layerConfig.id);\n            if (layerActions.length) metadatas.actions = layerActions;\n\n        }\n        if( lizMap.mainLizmap.map.getActiveBaseLayer()?.get(\"name\") == aName ){\n            metadatas.type = 'layer';\n            metadatas.isBaselayer = true;\n        }\n\n        if( metadatas ){\n            var layerConfig = lizMap.config.layers[aName];\n\n            // Header\n            html+= '<div class=\"sub-metadata\">';\n            html+= '<h3>';\n            html+='    <span class=\"title\">';\n            html+='        <span class=\"icon\"></span>';\n            html+='        <span class=\"text\">'+lizDict['layer.metadata.title']+'</span>';\n            html+='    </span>';\n            html+='</h3>';\n\n            // Content\n            html+= '<div class=\"menu-content\">';\n\n            // Metadata\n            html+= '    <dl class=\"dl-vertical\" style=\"font-size:0.8em;\">';\n            html+= '        <dt>'+lizDict['layer.metadata.layer.name']+'</dt>';\n            html+= '        <dd>'+metadatas.title+'</dd>';\n            html+= '        <dt>'+lizDict['layer.metadata.layer.type']+'</dt>';\n            html+= '        <dd>'+lizDict['layer.metadata.layer.type.' + metadatas.type]+'</dd>';\n\n            // Zoom\n            html+= '        <dt>'+lizDict['layer.metadata.zoomToExtent.title']+'</dt>';\n            html+= '<dd><button class=\"btn btn-mini layerActionZoom\" title=\"'+lizDict['layer.metadata.zoomToExtent.title']+'\" value=\"'+aName+'\"><i class=\"icon-zoom-in\"></i></button></dd>';\n\n            // Tools\n            var isBaselayer = '';\n            if(metadatas.isBaselayer){\n                isBaselayer = 'baselayer';\n            }\n\n            // Styles\n            if( metadatas.styles ){\n                const layer = lizMap.mainLizmap.state.rootMapGroup.getMapLayerByName(aName);\n                options = '';\n                for( var st in metadatas.styles ){\n                    st = metadatas.styles[st];\n                    if( st == layer.wmsSelectedStyleName )\n                        options += '<option value=\"'+st+'\" selected>'+st+'</option>';\n                    else\n                        options += '<option value=\"'+st+'\">'+st+'</option>';\n                }\n                if( options != '' ){\n                    html+= '        <dt>'+lizDict['layer.metadata.style.title']+'</dt>';\n                    html+= '<dd>';\n                    html+= '<input type=\"hidden\" class=\"styleLayer '+isBaselayer+'\" value=\"'+aName+'\">';\n                    html+= '<select class=\"styleLayer '+isBaselayer+'\">';\n                    html+= options;\n                    html+= '</select>';\n                    html+= '</dd>';\n                }\n            }\n            // Opacity\n            let isSingleWMSLayer = false;\n            if (!metadatas.isBaselayer) {\n                isSingleWMSLayer = lizMap.mainLizmap.state.rootMapGroup.getMapLayerOrGroupByName(aName).singleWMSLayer;\n            }\n            if (!isSingleWMSLayer) {\n                html+= '        <dt>'+lizDict['layer.metadata.opacity.title']+'</dt>';\n                html+= '<dd>';\n                html+= '<input type=\"hidden\" class=\"opacityLayer '+isBaselayer+'\" value=\"'+aName+'\">';\n\n                const currentOpacity = lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerOrGroupByName(aName).opacity;\n                var opacities = lizMap.config.options.layersOpacities;\n                if (typeof opacities === 'undefined') {\n                    opacities = [0.2, 0.4, 0.6, 0.8, 1];\n                }\n                for ( var i=0, len=opacities.length; i<len; i++ ) {\n                    var oactive = '';\n                    if(currentOpacity == opacities[i])\n                        oactive = 'active';\n                    html+= '<a href=\"#\" class=\"btn btn-mini btn-opacity-layer '+ oactive+' '+ opacities[i]*100+'\">'+opacities[i]*100+'</a>';\n                }\n                html+= '</dd>';\n            }\n\n            // Export\n            if ( 'exportLayers' in lizMap.config.options\n                && lizMap.config.options.exportLayers == 'True'\n                && featureTypes != null\n                && featureTypes.length != 0 ) {\n                var exportFormats = lizMap.getVectorLayerResultFormat();\n                var options = '';\n                for ( const format of exportFormats ) {\n                    options += '<option value=\"'+format+'\">'+format+'</option>';\n                }\n                // Export layer\n                // Only if layer is in attribute table\n                if( options != '' && layerConfig.typename != undefined) {\n                    html+= '        <dt>'+lizDict['layer.metadata.export.title']+'</dt>';\n                    html+= '<dd>';\n                    html+= '<select class=\"exportLayer '+isBaselayer+'\">';\n                    html+= options;\n                    html+= '</select>';\n                    html+= '<button class=\"btn btn-mini exportLayer '+isBaselayer+'\" title=\"'+lizDict['layer.metadata.export.title']+'\" value=\"'+aName+'\"><i class=\"icon-download\"></i></button>';\n                    html+= '</dd>';\n                }\n            }\n\n            if( metadatas.abstract ){\n                html+= '        <dt>'+lizDict['layer.metadata.layer.abstract']+'</dt>';\n                html+= '        <dd>'+metadatas.abstract+'</dd>';\n            }\n\n            // Actions\n            if (metadatas.actions) {\n                html+= '        <dt>'+lizDict['action.title']+'</dt>';\n                html += `\n                <div class=\"layer-action-selector-container\">\n                    <lizmap-action-selector id=\"lizmap-layer-action-${layerConfig.id}\" title=\"${lizDict['action.form.select.help']}\"\n                        no-selection-warning=\"${lizDict['action.form.select.warning']}\"\n                        action-scope=\"layer\" action-layer-id=\"${layerConfig.id}\"\n                    ></lizmap-action-selector>\n                <div>\n                `;\n            }\n\n            html+= '    </dl>';\n\n            // Link\n            if( metadatas.link  ){\n                html+= '    <button class=\"btn link layer-info\" name=\"link\" title=\"'+lizDict['layer.metadata.layer.info.see']+'\" value=\"'+metadatas.link+'\">'+lizDict['layer.metadata.layer.info.see']+'</button>';\n            }\n\n            // Style\n            html+= '</div>';\n            html+= '</div>';\n            html+= '<button id=\"hide-sub-dock\" class=\"btn btn-mini pull-right\" name=\"close\" title=\"'+lizDict['generic.btn.close.title']+'\" value=\"'+aName+'\">'+lizDict['generic.btn.close.title']+'</button>';\n        }\n\n        return html;\n    }\n\n    /**\n     *\n     * @param layerName\n     * @param selected\n     */\n    function toggleMetadataSubDock(layerName, selected){\n        if( selected ){\n            var html = getLayerMetadataHtml( layerName );\n            fillSubDock( html );\n        }else{\n            $('#sub-dock').hide().html( '' );\n            return;\n        }\n\n        var subDockVisible = ( $('#sub-dock').css('display') != 'none' );\n        if( !subDockVisible ){\n            $('#sub-dock').show();\n        }\n    }\n\n    lizMap.events.on({\n\n        'uicreated': function(){\n\n            // Display theme switcher if any\n            if ('themes' in lizMap.config){\n                var themes = lizMap.config.themes;\n                var themeSelector = '<div id=\"theme-selector\" class=\"btn-group\" role=\"group\">';\n                themeSelector += '<button class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\" title=\"' + lizDict['switcherLayersActions.themeSelector.title'] +'\" href=\"#\"><i class=\"icon-none qgis_sprite mActionShowAllLayers\"></i><span class=\"caret\"></span></button>';\n                themeSelector += '<ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\" aria-labelledby=\"dropdownMenu\">';\n\n                for (var themeName in themes) {\n                    themeSelector += '<li class=\"theme\"><a href=\"#\">' + themeName + '</a></li>';\n                }\n\n                themeSelector += '</ul>';\n                themeSelector += '</div>';\n\n                $('#switcher-layers-actions').prepend(themeSelector);\n\n                // Handle theme switching\n                $('#theme-selector').on('click', '.theme', function () {\n                    // Set theme as selected\n                    $('#theme-selector .theme').removeClass('selected');\n                    $(this).addClass('selected');\n\n                    const themeNameSelected = $(this).text();\n\n                    if (themeNameSelected in lizMap.config.themes){\n                        const themeSelected = lizMap.config.themes[themeNameSelected];\n\n                        // Groups and subgroups are separated by a '/'. We only keep deeper groups\n                        const checkedGroups = themeSelected?.checkedGroupNode?.map(groupNode => groupNode.split('/').slice(-1)[0]) || [];\n                        const expandedGroups = themeSelected?.expandedGroupNode?.map(groupNode => groupNode.split('/').slice(-1)[0]) || [];\n                        const expandedLegendNodes = themeSelected?.expandedLegendNode || [];\n\n                        // Set checked and expanded states\n                        for (const layerOrGroup of lizMap.mainLizmap.state.layerTree.findTreeLayersAndGroups()) {\n                            // Groups in theme are based on QGIS group (so groupAsLayer is not a layer but a group)\n                            if (layerOrGroup.mapItemState.itemState.type === \"group\") {\n                                layerOrGroup.checked = checkedGroups.includes(layerOrGroup.name);\n                                layerOrGroup.expanded = expandedGroups.includes(layerOrGroup.name);\n                            } else {\n                                const layerParams = themeSelected?.layers?.[layerOrGroup.layerConfig.id];\n                                if (!layerParams) {\n                                    layerOrGroup.checked = false;\n                                    continue;\n                                }\n\n                                const style = layerParams?.style;\n                                if (style) {\n                                    layerOrGroup.wmsSelectedStyleName = style;\n                                }\n\n                                layerOrGroup.checked = true;\n                                layerOrGroup.expanded = layerParams?.expanded === \"1\";\n\n                                // `symbologyChildren` is empty for some time if the theme switches\n                                // the layer style from simple to categorized.\n                                // TODO: avoid this hack\n                                setTimeout(() => {\n                                    // Handle expanded legend states\n                                    const symbologyChildren = layerOrGroup.symbologyChildren;\n                                    if (symbologyChildren.length) {\n                                        for (const symbol of symbologyChildren) {\n                                            symbol.expanded = expandedLegendNodes.includes(symbol.ruleKey);\n                                        }\n                                    }\n                                }, 1000);\n\n                            }\n                        }\n\n                        // Set baseLayers checked state\n                        if (themeSelected?.checkedGroupNode?.includes(\"baselayers/project-background-color\")) {\n                            lizMap.mainLizmap.state.baseLayers.selectedBaseLayerName = \"project-background-color\";\n                        } else {\n                            for (const baseLayer of lizMap.mainLizmap.state.baseLayers.getBaseLayers()) {\n                                if (!baseLayer.layerConfig) {\n                                    continue;\n                                }\n                                if (themeSelected?.layers?.[baseLayer.layerConfig.id]) {\n                                    lizMap.mainLizmap.state.baseLayers.selectedBaseLayerName = baseLayer.name;\n                                    break;\n                                }\n                            }\n                        }\n\n                        // Trigger map theme event\n                        lizMap.events.triggerEvent(\"mapthemechanged\",\n                            {\n                                'name': themeNameSelected,\n                                'config': themeSelected\n                            }\n                        );\n                    }\n                    $('#theme-selector.open').click();\n                    return false;\n                });\n\n                // Trigger event with the list of mapThemes\n                lizMap.events.triggerEvent(\"mapthemesadded\",\n                    {\n                        'themes': themes\n                    }\n                );\n\n                // Activate first map theme on load\n                if (lizMap.mainLizmap.initialConfig.options.activateFirstMapTheme) {\n                    $('#theme-selector li.theme:nth-child(1)').click();\n                }\n                const urlParameters = (new URL(document.location)).searchParams;\n                if (urlParameters.has('mapTheme')) {\n                    const urlMapTheme = urlParameters.get('mapTheme');\n                    $('#theme-selector li.theme').filter((i, e) => e.textContent == urlMapTheme).click();\n                }\n            }\n\n            featureTypes = lizMap.getVectorLayerFeatureTypes();\n\n            // title tooltip\n            $('#switcher-layers-actions .btn, #get-baselayer-metadata').tooltip({\n                placement: 'bottom'\n            });\n\n            // Expand all or unfold all\n            document.getElementById('layers-unfold-all').addEventListener('click', () => {\n                document.querySelectorAll('lizmap-treeview .expandable').forEach(element => element.classList.add('expanded'));\n            });\n            document.getElementById('layers-fold-all').addEventListener('click', () => {\n                document.querySelectorAll('lizmap-treeview .expandable').forEach(element => element.classList.remove('expanded'));\n            });\n\n            // Activate get-baselayer-metadata button\n            $('#get-baselayer-metadata').click(function(){\n\n                $('#hide-sub-dock').click();\n\n                const activeBaseLayerName = lizMap.mainLizmap.map.getActiveBaseLayer().get(\"name\");\n                if( !activeBaseLayerName ){\n                    return false;\n                }\n\n                lizMap.events.triggerEvent(\"lizmapswitcheritemselected\",\n                    { 'name': activeBaseLayerName, 'type': 'baselayer', 'selected': true}\n                );\n                return false;\n            });\n\n            // Zoom\n            $('#content').on('click', 'button.layerActionZoom', function(){\n                var layerName = $(this).val();\n                if( !layerName ){\n                    return false;\n                }\n\n                var itemConfig = lizMap.config.layers[layerName];\n                if( itemConfig.type == 'baselayer' )\n                    lizMap.map.zoomToMaxExtent();\n\n                var mapProjection = lizMap.map.getProjection();\n                if(mapProjection == 'EPSG:900913')\n                    mapProjection = 'EPSG:3857';\n\n                /*if( !( 'bbox' in itemConfig ) || !( mapProjection in itemConfig['bbox'] ) ){\n                    console.log('The layer bbox information has not been found in config');\n                    console.log(itemConfig);\n                    return false;\n                }*/\n\n                /*var lex = itemConfig['bbox'][mapProjection]['bbox'];\n                var lBounds = new OpenLayers.Bounds(\n                    lex[0],\n                    lex[1],\n                    lex[2],\n                    lex[3]\n                );*/\n\n                if ( !('extent' in itemConfig) ) {\n                    console.log('The layer extent information has not been found in config');\n                    console.log(itemConfig);\n                    return false;\n                }\n                if ( !('crs' in itemConfig) ) {\n                    console.log('The layer crs information has not been found in config');\n                    console.log(itemConfig);\n                    return false;\n                }\n                var lBounds = OpenLayers.Bounds.fromArray(itemConfig['extent']);\n                lBounds = lBounds.transform(itemConfig['crs'],mapProjection);\n\n                // Reverse axis\n                /*if (OpenLayers.Projection.defaults[mapProjection] &&\n                    OpenLayers.Projection.defaults[mapProjection].yx) {\n                    lBounds = new OpenLayers.Bounds(\n                        lex[1],\n                        lex[0],\n                        lex[3],\n                        lex[2]\n                    );\n                }*/\n                lizMap.map.zoomToExtent( lBounds );\n\n                return false;\n            });\n\n            // Styles\n            $('#content').on('change', 'select.styleLayer', function(){\n\n                // Get chosen style\n                var eStyle = $(this).val();\n\n                // Get layer name and type\n                var h = $(this).parent().find('input.styleLayer');\n                var name = h.val();\n                var isBaselayer = h.hasClass('baselayer');\n                if( !name )\n                    return false;\n\n                // Get layer\n                let layer;\n                if (isBaselayer) {\n                    layer = lizMap.map.baseLayer;\n                } else {\n                    layer = lizMap.mainLizmap.state.rootMapGroup.getMapLayerByName(name);\n                }\n\n                // Set style\n                layer.wmsSelectedStyleName = eStyle;\n            });\n\n            // Opacity\n            $('#content').on('click', 'a.btn-opacity-layer', function(){\n\n                // Get chosen opacity\n                var eVal = $(this).text();\n                var opacity = parseInt(eVal) / 100;\n\n                // Get layer name and type\n                var h = $(this).parent().find('input.opacityLayer');\n                var eName = h.val();\n                if( !eName ){\n                    return false;\n                }\n\n                // Get layer\n                const layer = lizMap.mainLizmap.state.layersAndGroupsCollection.getLayerOrGroupByName(eName);\n\n                // Set opacity\n                if( layer ) {\n                    layer.opacity = opacity;\n                    $('a.btn-opacity-layer').removeClass('active');\n                    $('a.btn-opacity-layer.' + opacity*100).addClass('active');\n                }\n\n                // Blur dropdown or baselayer button\n                $('#switcher').click();\n\n                return false;\n            });\n\n            // Export\n            $('#sub-dock').on('click', 'button.exportLayer', function(){\n                var eName = $(this).val();\n                var eFormat = $(this).parent().find('select.exportLayer').val();\n                lizMap.exportVectorLayer( eName, eFormat );\n                return false;\n            });\n\n            // Cancel Lizmap global filter\n            $('#layerActionUnfilter').click(function(){\n                var layerName = lizMap.lizmapLayerFilterActive;\n                if( !layerName )\n                    return false;\n\n                lizMap.events.triggerEvent(\"layerfeatureremovefilter\",\n                    { 'featureType': layerName}\n                );\n                lizMap.lizmapLayerFilterActive = null;\n                $(this).hide();\n\n                return false;\n            });\n\n            lizMap.events.on({\n                dockclosed: function(e) {\n                    if ( e.id == 'switcher' ) {\n                        $('#hide-sub-dock').click();\n                    }\n                },\n                lizmapbaselayerchanged: function(e) {\n                    if ( $('#sub-dock').is(':visible') ) {\n                        var subDockLayer = $('#hide-sub-dock').val();\n                        if ( $('#switcher-baselayer-select').find('option[value=\"'+subDockLayer+'\"]').length != 0 ) {\n                            if ( subDockLayer != $('#switcher-baselayer-select').val() ) {\n                                lizMap.events.triggerEvent(\"lizmapswitcheritemselected\",\n                                    { 'name': e.layer.name, 'type': 'baselayer', 'selected': true}\n                                );\n                            }\n                        }\n                    }\n                }\n            });\n\n        },\n        'lizmapswitcheritemselected': function(evt){\n\n            // Get item properties\n            var itemName = evt.name;\n            var itemType = evt.type;\n            var itemSelected = evt.selected;\n            var itemConfig = {};\n            // Get item Lizmap config\n            if( itemType == 'baselayer'){\n                var layerName = lizMap.getLayerNameByCleanName( lizMap.cleanName(itemName) );\n                if( layerName ){\n                    itemName = layerName;\n                }\n            } else {\n                itemConfig = lizMap.config.layers[itemName];\n            }\n\n            // Change action buttons values\n            var btValue = itemName;\n            if( !itemSelected )\n                btValue = '';\n            $('#switcher-layers-actions button').val( btValue );\n\n            // Toggle buttons depending on itemType\n\n            // Zoom to layer\n            var zoomStatus = (!itemSelected || !('bbox' in itemConfig) );\n            $('button.layerActionZoom').attr( 'disable', zoomStatus ).toggleClass( 'disabled', zoomStatus );\n\n            // Refresh sub-dock content\n            toggleMetadataSubDock(itemName, itemSelected);\n        }\n    });\n}();\n"],"names":["featureTypes","lizMap","events","on","config","themes","themeSelector","themeName","lizDict","$","prepend","removeClass","this","addClass","themeNameSelected","text","themeSelected","checkedGroups","checkedGroupNode","map","groupNode","split","slice","expandedGroups","expandedGroupNode","expandedLegendNodes","expandedLegendNode","layerOrGroup","mainLizmap","state","layerTree","findTreeLayersAndGroups","mapItemState","itemState","type","checked","includes","name","expanded","layerParams","layers","layerConfig","id","style","wmsSelectedStyleName","setTimeout","symbologyChildren","length","symbol","ruleKey","baseLayers","selectedBaseLayerName","baseLayer","getBaseLayers","triggerEvent","click","initialConfig","options","activateFirstMapTheme","urlParameters","URL","document","location","searchParams","has","urlMapTheme","get","filter","i","e","textContent","getVectorLayerFeatureTypes","tooltip","placement","getElementById","addEventListener","querySelectorAll","forEach","element","classList","add","remove","activeBaseLayerName","getActiveBaseLayer","layerName","val","itemConfig","zoomToMaxExtent","mapProjection","getProjection","console","log","lBounds","OpenLayers","Bounds","fromArray","transform","zoomToExtent","eStyle","h","parent","find","isBaselayer","hasClass","layer","rootMapGroup","getMapLayerByName","eVal","opacity","parseInt","eName","layersAndGroupsCollection","getLayerOrGroupByName","eFormat","exportVectorLayer","lizmapLayerFilterActive","hide","dockclosed","lizmapbaselayerchanged","is","subDockLayer","evt","itemName","itemType","itemSelected","selected","getLayerNameByCleanName","cleanName","btValue","zoomStatus","attr","toggleClass","html","aName","metadatas","title","abstract","link","styles","actions","layerActions","action","getActions","st","isSingleWMSLayer","getMapLayerOrGroupByName","singleWMSLayer","currentOpacity","opacities","layersOpacities","len","oactive","exportLayers","exportFormats","getVectorLayerResultFormat","format","undefined","typename","getLayerMetadataHtml","each","v","op","css","self","windowLink","test","globalThis","media","URLSearchParams","params","window","open","querySelector","itemNameSelected","show","toggleMetadataSubDock"],"sourceRoot":""}