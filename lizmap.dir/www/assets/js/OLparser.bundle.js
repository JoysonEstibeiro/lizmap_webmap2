"use strict";(self.webpackChunklizmap_web_client=self.webpackChunklizmap_web_client||[]).push([[163],{2563:(t,e,o)=>{o.r(e),o.d(e,{default:()=>s});var n=o(3487),i=o(5137);function r(t){return[t.x,t.y]}class s{constructor(t,e){this.geometryFactory=t||new i.A,this.ol=e||"undefined"!=typeof ol&&ol}inject(t,e,o,n,i,r,s,g){this.ol={geom:{Point:t,LineString:e,LinearRing:o,Polygon:n,MultiPoint:i,MultiLineString:r,MultiPolygon:s,GeometryCollection:g}}}read(t){const e=this.ol;return t instanceof e.geom.Point?this.convertFromPoint(t):t instanceof e.geom.LineString?this.convertFromLineString(t):t instanceof e.geom.LinearRing?this.convertFromLinearRing(t):t instanceof e.geom.Polygon?this.convertFromPolygon(t):t instanceof e.geom.MultiPoint?this.convertFromMultiPoint(t):t instanceof e.geom.MultiLineString?this.convertFromMultiLineString(t):t instanceof e.geom.MultiPolygon?this.convertFromMultiPolygon(t):t instanceof e.geom.GeometryCollection?this.convertFromCollection(t):void 0}convertFromPoint(t){const e=t.getCoordinates();return this.geometryFactory.createPoint(new n.A(e[0],e[1]))}convertFromLineString(t){return this.geometryFactory.createLineString(t.getCoordinates().map((function(t){return new n.A(t[0],t[1])})))}convertFromLinearRing(t){return this.geometryFactory.createLinearRing(t.getCoordinates().map((function(t){return new n.A(t[0],t[1])})))}convertFromPolygon(t){const e=t.getLinearRings();let o=null;const n=[];for(let t=0;t<e.length;t++){const i=this.convertFromLinearRing(e[t]);0===t?o=i:n.push(i)}return this.geometryFactory.createPolygon(o,n)}convertFromMultiPoint(t){const e=t.getPoints().map((function(t){return this.convertFromPoint(t)}),this);return this.geometryFactory.createMultiPoint(e)}convertFromMultiLineString(t){const e=t.getLineStrings().map((function(t){return this.convertFromLineString(t)}),this);return this.geometryFactory.createMultiLineString(e)}convertFromMultiPolygon(t){const e=t.getPolygons().map((function(t){return this.convertFromPolygon(t)}),this);return this.geometryFactory.createMultiPolygon(e)}convertFromCollection(t){const e=t.getGeometries().map((function(t){return this.read(t)}),this);return this.geometryFactory.createGeometryCollection(e)}write(t){return"Point"===t.getGeometryType()?this.convertToPoint(t.getCoordinate()):"LineString"===t.getGeometryType()?this.convertToLineString(t):"LinearRing"===t.getGeometryType()?this.convertToLinearRing(t):"Polygon"===t.getGeometryType()?this.convertToPolygon(t):"MultiPoint"===t.getGeometryType()?this.convertToMultiPoint(t):"MultiLineString"===t.getGeometryType()?this.convertToMultiLineString(t):"MultiPolygon"===t.getGeometryType()?this.convertToMultiPolygon(t):"GeometryCollection"===t.getGeometryType()?this.convertToCollection(t):void 0}convertToPoint(t){return new this.ol.geom.Point([t.x,t.y])}convertToLineString(t){const e=t._points._coordinates.map(r);return new this.ol.geom.LineString(e)}convertToLinearRing(t){const e=t._points._coordinates.map(r);return new this.ol.geom.LinearRing(e)}convertToPolygon(t){const e=[t._shell._points._coordinates.map(r)];for(let o=0;o<t._holes.length;o++)e.push(t._holes[o]._points._coordinates.map(r));return new this.ol.geom.Polygon(e)}convertToMultiPoint(t){return new this.ol.geom.MultiPoint(t.getCoordinates().map(r))}convertToMultiLineString(t){const e=[];for(let o=0;o<t._geometries.length;o++)e.push(this.convertToLineString(t._geometries[o]).getCoordinates());return new this.ol.geom.MultiLineString(e)}convertToMultiPolygon(t){const e=[];for(let o=0;o<t._geometries.length;o++)e.push(this.convertToPolygon(t._geometries[o]).getCoordinates());return new this.ol.geom.MultiPolygon(e)}convertToCollection(t){const e=[];for(let o=0;o<t._geometries.length;o++){const n=t._geometries[o];e.push(this.write(n))}return new this.ol.geom.GeometryCollection(e)}}}}]);
//# sourceMappingURL=OLparser.bundle.js.map